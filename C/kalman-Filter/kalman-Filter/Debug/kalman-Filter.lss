
kalman-Filter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001a38  00001acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800106  00800106  00001ad2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ad2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001580  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000415  00000000  00000000  000031c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f9  00000000  00000000  000035d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  00003bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000232  00000000  00000000  00004164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b06  00000000  00000000  00004396  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00005e9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	21 e0       	ldi	r18, 0x01	; 1
      76:	a6 e0       	ldi	r26, 0x06	; 6
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	a2 34       	cpi	r26, 0x42	; 66
      80:	b2 07       	cpc	r27, r18
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
      84:	11 e0       	ldi	r17, 0x01	; 1
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e8 e3       	ldi	r30, 0x38	; 56
      8c:	fa e1       	ldi	r31, 0x1A	; 26
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	a6 30       	cpi	r26, 0x06	; 6
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
      9a:	0e 94 97 02 	call	0x52e	; 0x52e <main>
      9e:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <compute>:
Matrix I2x2;
Matrix temp;


void compute(double y){
	Y.data[0][0] = y;
      a6:	e0 91 1c 01 	lds	r30, 0x011C
      aa:	f0 91 1d 01 	lds	r31, 0x011D
      ae:	01 90       	ld	r0, Z+
      b0:	f0 81       	ld	r31, Z
      b2:	e0 2d       	mov	r30, r0
      b4:	60 83       	st	Z, r22
      b6:	71 83       	std	Z+1, r23	; 0x01
      b8:	82 83       	std	Z+2, r24	; 0x02
      ba:	93 83       	std	Z+3, r25	; 0x03

	//Compute Kalman Gain K = P_ * H.T() * (H * P_ * H.T() + R).I();
	freeMatrix(&temp);
      bc:	8e e1       	ldi	r24, 0x1E	; 30
      be:	91 e0       	ldi	r25, 0x01	; 1
      c0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <freeMatrix>
	freeMatrix(&K);
      c4:	8e e0       	ldi	r24, 0x0E	; 14
      c6:	91 e0       	ldi	r25, 0x01	; 1
      c8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <freeMatrix>
	temp = mul(&H, &P_);
      cc:	66 e0       	ldi	r22, 0x06	; 6
      ce:	71 e0       	ldi	r23, 0x01	; 1
      d0:	8a e2       	ldi	r24, 0x2A	; 42
      d2:	91 e0       	ldi	r25, 0x01	; 1
      d4:	0e 94 62 04 	call	0x8c4	; 0x8c4 <mul>
      d8:	60 93 1e 01 	sts	0x011E, r22
      dc:	70 93 1f 01 	sts	0x011F, r23
      e0:	80 93 20 01 	sts	0x0120, r24
      e4:	90 93 21 01 	sts	0x0121, r25
	adde(mule(&temp, &HT), &R);
      e8:	6a e0       	ldi	r22, 0x0A	; 10
      ea:	71 e0       	ldi	r23, 0x01	; 1
      ec:	8e e1       	ldi	r24, 0x1E	; 30
      ee:	91 e0       	ldi	r25, 0x01	; 1
      f0:	0e 94 38 05 	call	0xa70	; 0xa70 <mule>
      f4:	6e e2       	ldi	r22, 0x2E	; 46
      f6:	71 e0       	ldi	r23, 0x01	; 1
      f8:	0e 94 6d 03 	call	0x6da	; 0x6da <adde>
	K = mul(&P_, &HT);
      fc:	6a e0       	ldi	r22, 0x0A	; 10
      fe:	71 e0       	ldi	r23, 0x01	; 1
     100:	86 e0       	ldi	r24, 0x06	; 6
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	0e 94 62 04 	call	0x8c4	; 0x8c4 <mul>
     108:	60 93 0e 01 	sts	0x010E, r22
     10c:	70 93 0f 01 	sts	0x010F, r23
     110:	80 93 10 01 	sts	0x0110, r24
     114:	90 93 11 01 	sts	0x0111, r25
	mule(&K, Ie(&temp));
     118:	8e e1       	ldi	r24, 0x1E	; 30
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 4a 09 	call	0x1294	; 0x1294 <Ie>
     120:	bc 01       	movw	r22, r24
     122:	8e e0       	ldi	r24, 0x0E	; 14
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	0e 94 38 05 	call	0xa70	; 0xa70 <mule>
	

	//Update Estimate X = X_ + K*(Y - H * X_);
	freeMatrix(&temp);
     12a:	8e e1       	ldi	r24, 0x1E	; 30
     12c:	91 e0       	ldi	r25, 0x01	; 1
     12e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <freeMatrix>
	freeMatrix(&X);
     132:	8a e3       	ldi	r24, 0x3A	; 58
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <freeMatrix>
	X = mul(&H, &X_);
     13a:	66 e2       	ldi	r22, 0x26	; 38
     13c:	71 e0       	ldi	r23, 0x01	; 1
     13e:	8a e2       	ldi	r24, 0x2A	; 42
     140:	91 e0       	ldi	r25, 0x01	; 1
     142:	0e 94 62 04 	call	0x8c4	; 0x8c4 <mul>
     146:	60 93 3a 01 	sts	0x013A, r22
     14a:	70 93 3b 01 	sts	0x013B, r23
     14e:	80 93 3c 01 	sts	0x013C, r24
     152:	90 93 3d 01 	sts	0x013D, r25
	temp = sub(&Y, &temp);
     156:	6e e1       	ldi	r22, 0x1E	; 30
     158:	71 e0       	ldi	r23, 0x01	; 1
     15a:	8a e1       	ldi	r24, 0x1A	; 26
     15c:	91 e0       	ldi	r25, 0x01	; 1
     15e:	0e 94 41 04 	call	0x882	; 0x882 <sub>
     162:	60 93 1e 01 	sts	0x011E, r22
     166:	70 93 1f 01 	sts	0x011F, r23
     16a:	80 93 20 01 	sts	0x0120, r24
     16e:	90 93 21 01 	sts	0x0121, r25
	freeMatrix(&X);
     172:	8a e3       	ldi	r24, 0x3A	; 58
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <freeMatrix>
	X = mul(&K, &temp);
     17a:	6e e1       	ldi	r22, 0x1E	; 30
     17c:	71 e0       	ldi	r23, 0x01	; 1
     17e:	8e e0       	ldi	r24, 0x0E	; 14
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	0e 94 62 04 	call	0x8c4	; 0x8c4 <mul>
     186:	60 93 3a 01 	sts	0x013A, r22
     18a:	70 93 3b 01 	sts	0x013B, r23
     18e:	80 93 3c 01 	sts	0x013C, r24
     192:	90 93 3d 01 	sts	0x013D, r25
	adde(&X, &X_);
     196:	66 e2       	ldi	r22, 0x26	; 38
     198:	71 e0       	ldi	r23, 0x01	; 1
     19a:	8a e3       	ldi	r24, 0x3A	; 58
     19c:	91 e0       	ldi	r25, 0x01	; 1
     19e:	0e 94 6d 03 	call	0x6da	; 0x6da <adde>

	//Compute error covariance P = (I - K * H) * P_;
	freeMatrix(&temp);
     1a2:	8e e1       	ldi	r24, 0x1E	; 30
     1a4:	91 e0       	ldi	r25, 0x01	; 1
     1a6:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <freeMatrix>
	freeMatrix(&P);
     1aa:	86 e3       	ldi	r24, 0x36	; 54
     1ac:	91 e0       	ldi	r25, 0x01	; 1
     1ae:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <freeMatrix>
	temp = mul(&K, &H);
     1b2:	6a e2       	ldi	r22, 0x2A	; 42
     1b4:	71 e0       	ldi	r23, 0x01	; 1
     1b6:	8e e0       	ldi	r24, 0x0E	; 14
     1b8:	91 e0       	ldi	r25, 0x01	; 1
     1ba:	0e 94 62 04 	call	0x8c4	; 0x8c4 <mul>
     1be:	60 93 1e 01 	sts	0x011E, r22
     1c2:	70 93 1f 01 	sts	0x011F, r23
     1c6:	80 93 20 01 	sts	0x0120, r24
     1ca:	90 93 21 01 	sts	0x0121, r25
	P = sub(&I2x2, &temp);
     1ce:	6e e1       	ldi	r22, 0x1E	; 30
     1d0:	71 e0       	ldi	r23, 0x01	; 1
     1d2:	82 e2       	ldi	r24, 0x22	; 34
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	0e 94 41 04 	call	0x882	; 0x882 <sub>
     1da:	60 93 36 01 	sts	0x0136, r22
     1de:	70 93 37 01 	sts	0x0137, r23
     1e2:	80 93 38 01 	sts	0x0138, r24
     1e6:	90 93 39 01 	sts	0x0139, r25
	mule(&P, &P_);
     1ea:	66 e0       	ldi	r22, 0x06	; 6
     1ec:	71 e0       	ldi	r23, 0x01	; 1
     1ee:	86 e3       	ldi	r24, 0x36	; 54
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	0e 94 38 05 	call	0xa70	; 0xa70 <mule>

	//Project ahead X_ = F*X; P_ = F * P * F.T() + Q;
	freeMatrix(&X_);
     1f6:	86 e2       	ldi	r24, 0x26	; 38
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <freeMatrix>
	X_ = mul(&F, &X);
     1fe:	6a e3       	ldi	r22, 0x3A	; 58
     200:	71 e0       	ldi	r23, 0x01	; 1
     202:	82 e3       	ldi	r24, 0x32	; 50
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	0e 94 62 04 	call	0x8c4	; 0x8c4 <mul>
     20a:	60 93 26 01 	sts	0x0126, r22
     20e:	70 93 27 01 	sts	0x0127, r23
     212:	80 93 28 01 	sts	0x0128, r24
     216:	90 93 29 01 	sts	0x0129, r25
	freeMatrix(&P_);
     21a:	86 e0       	ldi	r24, 0x06	; 6
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <freeMatrix>
	P_ = mul(&F, &P);
     222:	66 e3       	ldi	r22, 0x36	; 54
     224:	71 e0       	ldi	r23, 0x01	; 1
     226:	82 e3       	ldi	r24, 0x32	; 50
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <mul>
     22e:	60 93 06 01 	sts	0x0106, r22
     232:	70 93 07 01 	sts	0x0107, r23
     236:	80 93 08 01 	sts	0x0108, r24
     23a:	90 93 09 01 	sts	0x0109, r25
	adde(mule(&P_, &FT), &Q);
     23e:	66 e1       	ldi	r22, 0x16	; 22
     240:	71 e0       	ldi	r23, 0x01	; 1
     242:	86 e0       	ldi	r24, 0x06	; 6
     244:	91 e0       	ldi	r25, 0x01	; 1
     246:	0e 94 38 05 	call	0xa70	; 0xa70 <mule>
     24a:	62 e1       	ldi	r22, 0x12	; 18
     24c:	71 e0       	ldi	r23, 0x01	; 1
     24e:	0e 94 6d 03 	call	0x6da	; 0x6da <adde>
     252:	08 95       	ret

00000254 <setup>:
	
}

void setup(){
     254:	8f 92       	push	r8
     256:	9f 92       	push	r9
     258:	af 92       	push	r10
     25a:	bf 92       	push	r11
     25c:	cf 92       	push	r12
     25e:	df 92       	push	r13
     260:	ef 92       	push	r14
     262:	ff 92       	push	r15
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
	mallocMatrix(&X_, 2, 1);
     268:	41 e0       	ldi	r20, 0x01	; 1
     26a:	62 e0       	ldi	r22, 0x02	; 2
     26c:	86 e2       	ldi	r24, 0x26	; 38
     26e:	91 e0       	ldi	r25, 0x01	; 1
     270:	0e 94 ac 02 	call	0x558	; 0x558 <mallocMatrix>
	X_.data[0][0] = 0.2;
     274:	e6 e2       	ldi	r30, 0x26	; 38
     276:	f1 e0       	ldi	r31, 0x01	; 1
     278:	a2 81       	ldd	r26, Z+2	; 0x02
     27a:	b3 81       	ldd	r27, Z+3	; 0x03
     27c:	0d 90       	ld	r0, X+
     27e:	bc 91       	ld	r27, X
     280:	a0 2d       	mov	r26, r0
     282:	0f 2e       	mov	r0, r31
     284:	fd ec       	ldi	r31, 0xCD	; 205
     286:	8f 2e       	mov	r8, r31
     288:	fc ec       	ldi	r31, 0xCC	; 204
     28a:	9f 2e       	mov	r9, r31
     28c:	fc e4       	ldi	r31, 0x4C	; 76
     28e:	af 2e       	mov	r10, r31
     290:	fe e3       	ldi	r31, 0x3E	; 62
     292:	bf 2e       	mov	r11, r31
     294:	f0 2d       	mov	r31, r0
     296:	8d 92       	st	X+, r8
     298:	9d 92       	st	X+, r9
     29a:	ad 92       	st	X+, r10
     29c:	bc 92       	st	X, r11
     29e:	13 97       	sbiw	r26, 0x03	; 3
	X_.data[1][0] = 0.1;
     2a0:	02 80       	ldd	r0, Z+2	; 0x02
     2a2:	f3 81       	ldd	r31, Z+3	; 0x03
     2a4:	e0 2d       	mov	r30, r0
     2a6:	02 80       	ldd	r0, Z+2	; 0x02
     2a8:	f3 81       	ldd	r31, Z+3	; 0x03
     2aa:	e0 2d       	mov	r30, r0
     2ac:	8d ec       	ldi	r24, 0xCD	; 205
     2ae:	9c ec       	ldi	r25, 0xCC	; 204
     2b0:	ac ec       	ldi	r26, 0xCC	; 204
     2b2:	bd e3       	ldi	r27, 0x3D	; 61
     2b4:	80 83       	st	Z, r24
     2b6:	91 83       	std	Z+1, r25	; 0x01
     2b8:	a2 83       	std	Z+2, r26	; 0x02
     2ba:	b3 83       	std	Z+3, r27	; 0x03
	
	mallocMatrix(&X, 2, 1);
     2bc:	41 e0       	ldi	r20, 0x01	; 1
     2be:	62 e0       	ldi	r22, 0x02	; 2
     2c0:	8a e3       	ldi	r24, 0x3A	; 58
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	0e 94 ac 02 	call	0x558	; 0x558 <mallocMatrix>
	
	mallocMatrix(&Y, 1, 1);
     2c8:	41 e0       	ldi	r20, 0x01	; 1
     2ca:	61 e0       	ldi	r22, 0x01	; 1
     2cc:	8a e1       	ldi	r24, 0x1A	; 26
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	0e 94 ac 02 	call	0x558	; 0x558 <mallocMatrix>
	Y.data[0][0] = 0.5;
     2d4:	e0 91 1c 01 	lds	r30, 0x011C
     2d8:	f0 91 1d 01 	lds	r31, 0x011D
     2dc:	01 90       	ld	r0, Z+
     2de:	f0 81       	ld	r31, Z
     2e0:	e0 2d       	mov	r30, r0
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a0 e0       	ldi	r26, 0x00	; 0
     2e8:	bf e3       	ldi	r27, 0x3F	; 63
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
	
	mallocMatrix(&F, 2, 2);
     2f2:	42 e0       	ldi	r20, 0x02	; 2
     2f4:	62 e0       	ldi	r22, 0x02	; 2
     2f6:	82 e3       	ldi	r24, 0x32	; 50
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	0e 94 ac 02 	call	0x558	; 0x558 <mallocMatrix>
	F.data[0][0] = 1;
     2fe:	e2 e3       	ldi	r30, 0x32	; 50
     300:	f1 e0       	ldi	r31, 0x01	; 1
     302:	a2 81       	ldd	r26, Z+2	; 0x02
     304:	b3 81       	ldd	r27, Z+3	; 0x03
     306:	0d 90       	ld	r0, X+
     308:	bc 91       	ld	r27, X
     30a:	a0 2d       	mov	r26, r0
     30c:	0f 2e       	mov	r0, r31
     30e:	c1 2c       	mov	r12, r1
     310:	d1 2c       	mov	r13, r1
     312:	f0 e8       	ldi	r31, 0x80	; 128
     314:	ef 2e       	mov	r14, r31
     316:	ff e3       	ldi	r31, 0x3F	; 63
     318:	ff 2e       	mov	r15, r31
     31a:	f0 2d       	mov	r31, r0
     31c:	cd 92       	st	X+, r12
     31e:	dd 92       	st	X+, r13
     320:	ed 92       	st	X+, r14
     322:	fc 92       	st	X, r15
     324:	13 97       	sbiw	r26, 0x03	; 3
	F.data[0][1] = 1;
     326:	a2 81       	ldd	r26, Z+2	; 0x02
     328:	b3 81       	ldd	r27, Z+3	; 0x03
     32a:	cd 91       	ld	r28, X+
     32c:	dc 91       	ld	r29, X
     32e:	11 97       	sbiw	r26, 0x01	; 1
     330:	cc 82       	std	Y+4, r12	; 0x04
     332:	dd 82       	std	Y+5, r13	; 0x05
     334:	ee 82       	std	Y+6, r14	; 0x06
     336:	ff 82       	std	Y+7, r15	; 0x07
	F.data[1][0] = 0;
     338:	12 96       	adiw	r26, 0x02	; 2
     33a:	0d 90       	ld	r0, X+
     33c:	bc 91       	ld	r27, X
     33e:	a0 2d       	mov	r26, r0
     340:	1d 92       	st	X+, r1
     342:	1d 92       	st	X+, r1
     344:	1d 92       	st	X+, r1
     346:	1c 92       	st	X, r1
     348:	13 97       	sbiw	r26, 0x03	; 3
	F.data[1][1] = 1;
     34a:	02 80       	ldd	r0, Z+2	; 0x02
     34c:	f3 81       	ldd	r31, Z+3	; 0x03
     34e:	e0 2d       	mov	r30, r0
     350:	02 80       	ldd	r0, Z+2	; 0x02
     352:	f3 81       	ldd	r31, Z+3	; 0x03
     354:	e0 2d       	mov	r30, r0
     356:	c4 82       	std	Z+4, r12	; 0x04
     358:	d5 82       	std	Z+5, r13	; 0x05
     35a:	e6 82       	std	Z+6, r14	; 0x06
     35c:	f7 82       	std	Z+7, r15	; 0x07
	
	FT = T(&F);
     35e:	82 e3       	ldi	r24, 0x32	; 50
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	0e 94 35 0a 	call	0x146a	; 0x146a <T>
     366:	60 93 16 01 	sts	0x0116, r22
     36a:	70 93 17 01 	sts	0x0117, r23
     36e:	80 93 18 01 	sts	0x0118, r24
     372:	90 93 19 01 	sts	0x0119, r25
	
	mallocMatrix(&H, 1, 2);
     376:	42 e0       	ldi	r20, 0x02	; 2
     378:	61 e0       	ldi	r22, 0x01	; 1
     37a:	8a e2       	ldi	r24, 0x2A	; 42
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	0e 94 ac 02 	call	0x558	; 0x558 <mallocMatrix>
	H.data[0][0] = 1;
     382:	ea e2       	ldi	r30, 0x2A	; 42
     384:	f1 e0       	ldi	r31, 0x01	; 1
     386:	a2 81       	ldd	r26, Z+2	; 0x02
     388:	b3 81       	ldd	r27, Z+3	; 0x03
     38a:	0d 90       	ld	r0, X+
     38c:	bc 91       	ld	r27, X
     38e:	a0 2d       	mov	r26, r0
     390:	cd 92       	st	X+, r12
     392:	dd 92       	st	X+, r13
     394:	ed 92       	st	X+, r14
     396:	fc 92       	st	X, r15
     398:	13 97       	sbiw	r26, 0x03	; 3
	H.data[0][1] = 0;
     39a:	02 80       	ldd	r0, Z+2	; 0x02
     39c:	f3 81       	ldd	r31, Z+3	; 0x03
     39e:	e0 2d       	mov	r30, r0
     3a0:	01 90       	ld	r0, Z+
     3a2:	f0 81       	ld	r31, Z
     3a4:	e0 2d       	mov	r30, r0
     3a6:	14 82       	std	Z+4, r1	; 0x04
     3a8:	15 82       	std	Z+5, r1	; 0x05
     3aa:	16 82       	std	Z+6, r1	; 0x06
     3ac:	17 82       	std	Z+7, r1	; 0x07
	
	HT = T(&H);
     3ae:	8a e2       	ldi	r24, 0x2A	; 42
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 35 0a 	call	0x146a	; 0x146a <T>
     3b6:	60 93 0a 01 	sts	0x010A, r22
     3ba:	70 93 0b 01 	sts	0x010B, r23
     3be:	80 93 0c 01 	sts	0x010C, r24
     3c2:	90 93 0d 01 	sts	0x010D, r25
	
	mallocMatrix(&P_, 2, 2);
     3c6:	42 e0       	ldi	r20, 0x02	; 2
     3c8:	62 e0       	ldi	r22, 0x02	; 2
     3ca:	86 e0       	ldi	r24, 0x06	; 6
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 ac 02 	call	0x558	; 0x558 <mallocMatrix>
	P_.data[0][0] = 0.2;
     3d2:	e6 e0       	ldi	r30, 0x06	; 6
     3d4:	f1 e0       	ldi	r31, 0x01	; 1
     3d6:	a2 81       	ldd	r26, Z+2	; 0x02
     3d8:	b3 81       	ldd	r27, Z+3	; 0x03
     3da:	0d 90       	ld	r0, X+
     3dc:	bc 91       	ld	r27, X
     3de:	a0 2d       	mov	r26, r0
     3e0:	8d 92       	st	X+, r8
     3e2:	9d 92       	st	X+, r9
     3e4:	ad 92       	st	X+, r10
     3e6:	bc 92       	st	X, r11
     3e8:	13 97       	sbiw	r26, 0x03	; 3
	P_.data[0][1] = 0;
     3ea:	a2 81       	ldd	r26, Z+2	; 0x02
     3ec:	b3 81       	ldd	r27, Z+3	; 0x03
     3ee:	cd 91       	ld	r28, X+
     3f0:	dc 91       	ld	r29, X
     3f2:	11 97       	sbiw	r26, 0x01	; 1
     3f4:	1c 82       	std	Y+4, r1	; 0x04
     3f6:	1d 82       	std	Y+5, r1	; 0x05
     3f8:	1e 82       	std	Y+6, r1	; 0x06
     3fa:	1f 82       	std	Y+7, r1	; 0x07
	P_.data[1][0] = 0;
     3fc:	12 96       	adiw	r26, 0x02	; 2
     3fe:	0d 90       	ld	r0, X+
     400:	bc 91       	ld	r27, X
     402:	a0 2d       	mov	r26, r0
     404:	1d 92       	st	X+, r1
     406:	1d 92       	st	X+, r1
     408:	1d 92       	st	X+, r1
     40a:	1c 92       	st	X, r1
     40c:	13 97       	sbiw	r26, 0x03	; 3
	P_.data[1][1] = 0.4;
     40e:	02 80       	ldd	r0, Z+2	; 0x02
     410:	f3 81       	ldd	r31, Z+3	; 0x03
     412:	e0 2d       	mov	r30, r0
     414:	02 80       	ldd	r0, Z+2	; 0x02
     416:	f3 81       	ldd	r31, Z+3	; 0x03
     418:	e0 2d       	mov	r30, r0
     41a:	8d ec       	ldi	r24, 0xCD	; 205
     41c:	9c ec       	ldi	r25, 0xCC	; 204
     41e:	ac ec       	ldi	r26, 0xCC	; 204
     420:	be e3       	ldi	r27, 0x3E	; 62
     422:	84 83       	std	Z+4, r24	; 0x04
     424:	95 83       	std	Z+5, r25	; 0x05
     426:	a6 83       	std	Z+6, r26	; 0x06
     428:	b7 83       	std	Z+7, r27	; 0x07
	
	mallocMatrix(&P, 2, 2);
     42a:	42 e0       	ldi	r20, 0x02	; 2
     42c:	62 e0       	ldi	r22, 0x02	; 2
     42e:	86 e3       	ldi	r24, 0x36	; 54
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	0e 94 ac 02 	call	0x558	; 0x558 <mallocMatrix>
	
	mallocMatrix(&R, 1, 1);
     436:	41 e0       	ldi	r20, 0x01	; 1
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	8e e2       	ldi	r24, 0x2E	; 46
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	0e 94 ac 02 	call	0x558	; 0x558 <mallocMatrix>
	R.data[0][0] = 0.2;
     442:	e0 91 30 01 	lds	r30, 0x0130
     446:	f0 91 31 01 	lds	r31, 0x0131
     44a:	01 90       	ld	r0, Z+
     44c:	f0 81       	ld	r31, Z
     44e:	e0 2d       	mov	r30, r0
     450:	80 82       	st	Z, r8
     452:	91 82       	std	Z+1, r9	; 0x01
     454:	a2 82       	std	Z+2, r10	; 0x02
     456:	b3 82       	std	Z+3, r11	; 0x03
	
	mallocMatrix(&Q, 2, 2);
     458:	42 e0       	ldi	r20, 0x02	; 2
     45a:	62 e0       	ldi	r22, 0x02	; 2
     45c:	82 e1       	ldi	r24, 0x12	; 18
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	0e 94 ac 02 	call	0x558	; 0x558 <mallocMatrix>
	Q.data[0][0] = 0;
     464:	e2 e1       	ldi	r30, 0x12	; 18
     466:	f1 e0       	ldi	r31, 0x01	; 1
     468:	a2 81       	ldd	r26, Z+2	; 0x02
     46a:	b3 81       	ldd	r27, Z+3	; 0x03
     46c:	0d 90       	ld	r0, X+
     46e:	bc 91       	ld	r27, X
     470:	a0 2d       	mov	r26, r0
     472:	1d 92       	st	X+, r1
     474:	1d 92       	st	X+, r1
     476:	1d 92       	st	X+, r1
     478:	1c 92       	st	X, r1
     47a:	13 97       	sbiw	r26, 0x03	; 3
	Q.data[0][1] = 0;
     47c:	a2 81       	ldd	r26, Z+2	; 0x02
     47e:	b3 81       	ldd	r27, Z+3	; 0x03
     480:	cd 91       	ld	r28, X+
     482:	dc 91       	ld	r29, X
     484:	11 97       	sbiw	r26, 0x01	; 1
     486:	1c 82       	std	Y+4, r1	; 0x04
     488:	1d 82       	std	Y+5, r1	; 0x05
     48a:	1e 82       	std	Y+6, r1	; 0x06
     48c:	1f 82       	std	Y+7, r1	; 0x07
	Q.data[1][0] = 0;
     48e:	12 96       	adiw	r26, 0x02	; 2
     490:	0d 90       	ld	r0, X+
     492:	bc 91       	ld	r27, X
     494:	a0 2d       	mov	r26, r0
     496:	1d 92       	st	X+, r1
     498:	1d 92       	st	X+, r1
     49a:	1d 92       	st	X+, r1
     49c:	1c 92       	st	X, r1
     49e:	13 97       	sbiw	r26, 0x03	; 3
	Q.data[1][1] = 4;
     4a0:	02 80       	ldd	r0, Z+2	; 0x02
     4a2:	f3 81       	ldd	r31, Z+3	; 0x03
     4a4:	e0 2d       	mov	r30, r0
     4a6:	02 80       	ldd	r0, Z+2	; 0x02
     4a8:	f3 81       	ldd	r31, Z+3	; 0x03
     4aa:	e0 2d       	mov	r30, r0
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	a0 e8       	ldi	r26, 0x80	; 128
     4b2:	b0 e4       	ldi	r27, 0x40	; 64
     4b4:	84 83       	std	Z+4, r24	; 0x04
     4b6:	95 83       	std	Z+5, r25	; 0x05
     4b8:	a6 83       	std	Z+6, r26	; 0x06
     4ba:	b7 83       	std	Z+7, r27	; 0x07
	
	mallocMatrix(&I2x2, 2, 2);
     4bc:	42 e0       	ldi	r20, 0x02	; 2
     4be:	62 e0       	ldi	r22, 0x02	; 2
     4c0:	82 e2       	ldi	r24, 0x22	; 34
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 ac 02 	call	0x558	; 0x558 <mallocMatrix>
	I2x2.data[0][0] = 1;
     4c8:	e2 e2       	ldi	r30, 0x22	; 34
     4ca:	f1 e0       	ldi	r31, 0x01	; 1
     4cc:	a2 81       	ldd	r26, Z+2	; 0x02
     4ce:	b3 81       	ldd	r27, Z+3	; 0x03
     4d0:	0d 90       	ld	r0, X+
     4d2:	bc 91       	ld	r27, X
     4d4:	a0 2d       	mov	r26, r0
     4d6:	cd 92       	st	X+, r12
     4d8:	dd 92       	st	X+, r13
     4da:	ed 92       	st	X+, r14
     4dc:	fc 92       	st	X, r15
     4de:	13 97       	sbiw	r26, 0x03	; 3
	I2x2.data[0][1] = 0;
     4e0:	a2 81       	ldd	r26, Z+2	; 0x02
     4e2:	b3 81       	ldd	r27, Z+3	; 0x03
     4e4:	cd 91       	ld	r28, X+
     4e6:	dc 91       	ld	r29, X
     4e8:	11 97       	sbiw	r26, 0x01	; 1
     4ea:	1c 82       	std	Y+4, r1	; 0x04
     4ec:	1d 82       	std	Y+5, r1	; 0x05
     4ee:	1e 82       	std	Y+6, r1	; 0x06
     4f0:	1f 82       	std	Y+7, r1	; 0x07
	I2x2.data[1][0] = 0;
     4f2:	12 96       	adiw	r26, 0x02	; 2
     4f4:	0d 90       	ld	r0, X+
     4f6:	bc 91       	ld	r27, X
     4f8:	a0 2d       	mov	r26, r0
     4fa:	1d 92       	st	X+, r1
     4fc:	1d 92       	st	X+, r1
     4fe:	1d 92       	st	X+, r1
     500:	1c 92       	st	X, r1
     502:	13 97       	sbiw	r26, 0x03	; 3
	I2x2.data[1][1] = 1;
     504:	02 80       	ldd	r0, Z+2	; 0x02
     506:	f3 81       	ldd	r31, Z+3	; 0x03
     508:	e0 2d       	mov	r30, r0
     50a:	02 80       	ldd	r0, Z+2	; 0x02
     50c:	f3 81       	ldd	r31, Z+3	; 0x03
     50e:	e0 2d       	mov	r30, r0
     510:	c4 82       	std	Z+4, r12	; 0x04
     512:	d5 82       	std	Z+5, r13	; 0x05
     514:	e6 82       	std	Z+6, r14	; 0x06
     516:	f7 82       	std	Z+7, r15	; 0x07
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	ff 90       	pop	r15
     51e:	ef 90       	pop	r14
     520:	df 90       	pop	r13
     522:	cf 90       	pop	r12
     524:	bf 90       	pop	r11
     526:	af 90       	pop	r10
     528:	9f 90       	pop	r9
     52a:	8f 90       	pop	r8
     52c:	08 95       	ret

0000052e <main>:
{
    /* Replace with your application code */
	
	//Example setup with return values of estimate X
	//See details in PDF solution_exam_2013.pdf (problem 4)
	setup();
     52e:	0e 94 2a 01 	call	0x254	; 0x254 <setup>
	compute(0.5);	//X = [0.35, 0.1]^T
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	9f e3       	ldi	r25, 0x3F	; 63
     53a:	0e 94 53 00 	call	0xa6	; 0xa6 <compute>
	compute(1.0);	//X = [0.8429, 0.4143]^T
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	80 e8       	ldi	r24, 0x80	; 128
     544:	9f e3       	ldi	r25, 0x3F	; 63
     546:	0e 94 53 00 	call	0xa6	; 0xa6 <compute>
	compute(1.3);	//X = [1.2982, 0.4530]^T
     54a:	66 e6       	ldi	r22, 0x66	; 102
     54c:	76 e6       	ldi	r23, 0x66	; 102
     54e:	86 ea       	ldi	r24, 0xA6	; 166
     550:	9f e3       	ldi	r25, 0x3F	; 63
     552:	0e 94 53 00 	call	0xa6	; 0xa6 <compute>
	
    while (1) 
    {
    }
     556:	ff cf       	rjmp	.-2      	; 0x556 <main+0x28>

00000558 <mallocMatrix>:


#include "Matrix.h"
#include <stdlib.h>

void mallocMatrix(Matrix* m, uint8_t row, uint8_t col){
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	7c 01       	movw	r14, r24
	m->row = row;
     564:	fc 01       	movw	r30, r24
     566:	60 83       	st	Z, r22
	m->col = col;
     568:	41 83       	std	Z+1, r20	; 0x01
	
	m->data = (double**) malloc(m->row * sizeof(double*));
     56a:	86 2f       	mov	r24, r22
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	0e 94 ed 0b 	call	0x17da	; 0x17da <malloc>
     576:	f7 01       	movw	r30, r14
     578:	93 83       	std	Z+3, r25	; 0x03
     57a:	82 83       	std	Z+2, r24	; 0x02
	for (uint8_t r = 0; r < m->row; r++){
     57c:	80 81       	ld	r24, Z
     57e:	88 23       	and	r24, r24
     580:	c9 f0       	breq	.+50     	; 0x5b4 <mallocMatrix+0x5c>
     582:	10 e0       	ldi	r17, 0x00	; 0
		m->data[r] = (double*) malloc(m->col * sizeof(double));
     584:	c1 2f       	mov	r28, r17
     586:	d0 e0       	ldi	r29, 0x00	; 0
     588:	cc 0f       	add	r28, r28
     58a:	dd 1f       	adc	r29, r29
     58c:	f7 01       	movw	r30, r14
     58e:	82 81       	ldd	r24, Z+2	; 0x02
     590:	93 81       	ldd	r25, Z+3	; 0x03
     592:	c8 0f       	add	r28, r24
     594:	d9 1f       	adc	r29, r25
     596:	81 81       	ldd	r24, Z+1	; 0x01
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	88 0f       	add	r24, r24
     5a0:	99 1f       	adc	r25, r25
     5a2:	0e 94 ed 0b 	call	0x17da	; 0x17da <malloc>
     5a6:	99 83       	std	Y+1, r25	; 0x01
     5a8:	88 83       	st	Y, r24
void mallocMatrix(Matrix* m, uint8_t row, uint8_t col){
	m->row = row;
	m->col = col;
	
	m->data = (double**) malloc(m->row * sizeof(double*));
	for (uint8_t r = 0; r < m->row; r++){
     5aa:	1f 5f       	subi	r17, 0xFF	; 255
     5ac:	f7 01       	movw	r30, r14
     5ae:	80 81       	ld	r24, Z
     5b0:	18 17       	cp	r17, r24
     5b2:	40 f3       	brcs	.-48     	; 0x584 <mallocMatrix+0x2c>
		m->data[r] = (double*) malloc(m->col * sizeof(double));
	}
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	ff 90       	pop	r15
     5bc:	ef 90       	pop	r14
     5be:	08 95       	ret

000005c0 <freeMatrix>:

void freeMatrix(Matrix* m){
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	8c 01       	movw	r16, r24
	for (uint8_t r = 0; r < m->row; r++){
     5c8:	dc 01       	movw	r26, r24
     5ca:	8c 91       	ld	r24, X
     5cc:	88 23       	and	r24, r24
     5ce:	a9 f0       	breq	.+42     	; 0x5fa <freeMatrix+0x3a>
     5d0:	c0 e0       	ldi	r28, 0x00	; 0
		free(m->data[r]);
     5d2:	ec 2f       	mov	r30, r28
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	ee 0f       	add	r30, r30
     5d8:	ff 1f       	adc	r31, r31
     5da:	d8 01       	movw	r26, r16
     5dc:	12 96       	adiw	r26, 0x02	; 2
     5de:	8d 91       	ld	r24, X+
     5e0:	9c 91       	ld	r25, X
     5e2:	13 97       	sbiw	r26, 0x03	; 3
     5e4:	e8 0f       	add	r30, r24
     5e6:	f9 1f       	adc	r31, r25
     5e8:	80 81       	ld	r24, Z
     5ea:	91 81       	ldd	r25, Z+1	; 0x01
     5ec:	0e 94 82 0c 	call	0x1904	; 0x1904 <free>
		m->data[r] = (double*) malloc(m->col * sizeof(double));
	}
}

void freeMatrix(Matrix* m){
	for (uint8_t r = 0; r < m->row; r++){
     5f0:	cf 5f       	subi	r28, 0xFF	; 255
     5f2:	f8 01       	movw	r30, r16
     5f4:	80 81       	ld	r24, Z
     5f6:	c8 17       	cp	r28, r24
     5f8:	60 f3       	brcs	.-40     	; 0x5d2 <freeMatrix+0x12>
		free(m->data[r]);
	}
	free(m->data);
     5fa:	d8 01       	movw	r26, r16
     5fc:	12 96       	adiw	r26, 0x02	; 2
     5fe:	8d 91       	ld	r24, X+
     600:	9c 91       	ld	r25, X
     602:	13 97       	sbiw	r26, 0x03	; 3
     604:	0e 94 82 0c 	call	0x1904	; 0x1904 <free>
	m->row = 0;
     608:	f8 01       	movw	r30, r16
     60a:	10 82       	st	Z, r1
	m->col = 0;
     60c:	11 82       	std	Z+1, r1	; 0x01
}
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	08 95       	ret

00000616 <copy>:
		freeMatrix(m);
		mallocMatrix(m, row, col);
	}
}

Matrix copy(Matrix* rhs){
     616:	cf 92       	push	r12
     618:	df 92       	push	r13
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	00 d0       	rcall	.+0      	; 0x628 <copy+0x12>
     628:	00 d0       	rcall	.+0      	; 0x62a <copy+0x14>
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	8c 01       	movw	r16, r24
	Matrix temp;
	mallocMatrix(&temp, rhs->row, rhs->col);
     630:	dc 01       	movw	r26, r24
     632:	11 96       	adiw	r26, 0x01	; 1
     634:	4c 91       	ld	r20, X
     636:	11 97       	sbiw	r26, 0x01	; 1
     638:	6c 91       	ld	r22, X
     63a:	ce 01       	movw	r24, r28
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	0e 94 ac 02 	call	0x558	; 0x558 <mallocMatrix>
	for(uint8_t r = 0; r < temp.row; r++){
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	81 11       	cpse	r24, r1
     646:	2d c0       	rjmp	.+90     	; 0x6a2 <copy+0x8c>
     648:	37 c0       	rjmp	.+110    	; 0x6b8 <copy+0xa2>
		for (uint8_t c = 0; c < temp.col; c++){
			temp.data[r][c] = rhs->data[r][c];
     64a:	29 2f       	mov	r18, r25
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	22 0f       	add	r18, r18
     650:	33 1f       	adc	r19, r19
     652:	22 0f       	add	r18, r18
     654:	33 1f       	adc	r19, r19
     656:	d8 01       	movw	r26, r16
     658:	12 96       	adiw	r26, 0x02	; 2
     65a:	ed 91       	ld	r30, X+
     65c:	fc 91       	ld	r31, X
     65e:	13 97       	sbiw	r26, 0x03	; 3
     660:	e4 0f       	add	r30, r20
     662:	f5 1f       	adc	r31, r21
     664:	01 90       	ld	r0, Z+
     666:	f0 81       	ld	r31, Z
     668:	e0 2d       	mov	r30, r0
     66a:	e2 0f       	add	r30, r18
     66c:	f3 1f       	adc	r31, r19
     66e:	c0 80       	ld	r12, Z
     670:	d1 80       	ldd	r13, Z+1	; 0x01
     672:	e2 80       	ldd	r14, Z+2	; 0x02
     674:	f3 80       	ldd	r15, Z+3	; 0x03
     676:	eb 81       	ldd	r30, Y+3	; 0x03
     678:	fc 81       	ldd	r31, Y+4	; 0x04
     67a:	e4 0f       	add	r30, r20
     67c:	f5 1f       	adc	r31, r21
     67e:	01 90       	ld	r0, Z+
     680:	f0 81       	ld	r31, Z
     682:	e0 2d       	mov	r30, r0
     684:	e2 0f       	add	r30, r18
     686:	f3 1f       	adc	r31, r19
     688:	c0 82       	st	Z, r12
     68a:	d1 82       	std	Z+1, r13	; 0x01
     68c:	e2 82       	std	Z+2, r14	; 0x02
     68e:	f3 82       	std	Z+3, r15	; 0x03

Matrix copy(Matrix* rhs){
	Matrix temp;
	mallocMatrix(&temp, rhs->row, rhs->col);
	for(uint8_t r = 0; r < temp.row; r++){
		for (uint8_t c = 0; c < temp.col; c++){
     690:	9f 5f       	subi	r25, 0xFF	; 255
     692:	8a 81       	ldd	r24, Y+2	; 0x02
     694:	98 17       	cp	r25, r24
     696:	c8 f2       	brcs	.-78     	; 0x64a <copy+0x34>
}

Matrix copy(Matrix* rhs){
	Matrix temp;
	mallocMatrix(&temp, rhs->row, rhs->col);
	for(uint8_t r = 0; r < temp.row; r++){
     698:	6f 5f       	subi	r22, 0xFF	; 255
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	68 17       	cp	r22, r24
     69e:	18 f0       	brcs	.+6      	; 0x6a6 <copy+0x90>
     6a0:	0b c0       	rjmp	.+22     	; 0x6b8 <copy+0xa2>
     6a2:	60 e0       	ldi	r22, 0x00	; 0
		for (uint8_t c = 0; c < temp.col; c++){
			temp.data[r][c] = rhs->data[r][c];
     6a4:	70 e0       	ldi	r23, 0x00	; 0

Matrix copy(Matrix* rhs){
	Matrix temp;
	mallocMatrix(&temp, rhs->row, rhs->col);
	for(uint8_t r = 0; r < temp.row; r++){
		for (uint8_t c = 0; c < temp.col; c++){
     6a6:	8a 81       	ldd	r24, Y+2	; 0x02
     6a8:	88 23       	and	r24, r24
     6aa:	b1 f3       	breq	.-20     	; 0x698 <copy+0x82>
			temp.data[r][c] = rhs->data[r][c];
     6ac:	46 2f       	mov	r20, r22
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	44 0f       	add	r20, r20
     6b2:	55 1f       	adc	r21, r21
     6b4:	97 2f       	mov	r25, r23
     6b6:	c9 cf       	rjmp	.-110    	; 0x64a <copy+0x34>
		}
	}
	return temp;
     6b8:	69 81       	ldd	r22, Y+1	; 0x01
     6ba:	7a 81       	ldd	r23, Y+2	; 0x02
     6bc:	8b 81       	ldd	r24, Y+3	; 0x03
     6be:	9c 81       	ldd	r25, Y+4	; 0x04
}
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	ff 90       	pop	r15
     6d2:	ef 90       	pop	r14
     6d4:	df 90       	pop	r13
     6d6:	cf 90       	pop	r12
     6d8:	08 95       	ret

000006da <adde>:

Matrix* adde(Matrix* lhs, Matrix* rhs){
     6da:	9f 92       	push	r9
     6dc:	af 92       	push	r10
     6de:	bf 92       	push	r11
     6e0:	cf 92       	push	r12
     6e2:	df 92       	push	r13
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	8c 01       	movw	r16, r24
     6f2:	6b 01       	movw	r12, r22
	if (lhs->row == rhs->row && lhs->col == rhs->col){
     6f4:	dc 01       	movw	r26, r24
     6f6:	8c 91       	ld	r24, X
     6f8:	fb 01       	movw	r30, r22
     6fa:	90 81       	ld	r25, Z
     6fc:	89 13       	cpse	r24, r25
     6fe:	4a c0       	rjmp	.+148    	; 0x794 <adde+0xba>
     700:	11 96       	adiw	r26, 0x01	; 1
     702:	2c 91       	ld	r18, X
     704:	91 81       	ldd	r25, Z+1	; 0x01
     706:	29 13       	cpse	r18, r25
     708:	45 c0       	rjmp	.+138    	; 0x794 <adde+0xba>
		for (uint8_t r = 0; r < lhs->row; r++){
     70a:	81 11       	cpse	r24, r1
     70c:	37 c0       	rjmp	.+110    	; 0x77c <adde+0xa2>
     70e:	42 c0       	rjmp	.+132    	; 0x794 <adde+0xba>
			for (uint8_t c = 0; c < lhs->col; c++){
				lhs->data[r][c] += rhs->data[r][c];
     710:	2b 2d       	mov	r18, r11
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	22 0f       	add	r18, r18
     716:	33 1f       	adc	r19, r19
     718:	22 0f       	add	r18, r18
     71a:	33 1f       	adc	r19, r19
     71c:	d8 01       	movw	r26, r16
     71e:	12 96       	adiw	r26, 0x02	; 2
     720:	ed 91       	ld	r30, X+
     722:	fc 91       	ld	r31, X
     724:	13 97       	sbiw	r26, 0x03	; 3
     726:	ee 0d       	add	r30, r14
     728:	ff 1d       	adc	r31, r15
     72a:	c0 81       	ld	r28, Z
     72c:	d1 81       	ldd	r29, Z+1	; 0x01
     72e:	c2 0f       	add	r28, r18
     730:	d3 1f       	adc	r29, r19
     732:	d6 01       	movw	r26, r12
     734:	12 96       	adiw	r26, 0x02	; 2
     736:	ed 91       	ld	r30, X+
     738:	fc 91       	ld	r31, X
     73a:	13 97       	sbiw	r26, 0x03	; 3
     73c:	ee 0d       	add	r30, r14
     73e:	ff 1d       	adc	r31, r15
     740:	80 81       	ld	r24, Z
     742:	91 81       	ldd	r25, Z+1	; 0x01
     744:	fc 01       	movw	r30, r24
     746:	e2 0f       	add	r30, r18
     748:	f3 1f       	adc	r31, r19
     74a:	20 81       	ld	r18, Z
     74c:	31 81       	ldd	r19, Z+1	; 0x01
     74e:	42 81       	ldd	r20, Z+2	; 0x02
     750:	53 81       	ldd	r21, Z+3	; 0x03
     752:	68 81       	ld	r22, Y
     754:	79 81       	ldd	r23, Y+1	; 0x01
     756:	8a 81       	ldd	r24, Y+2	; 0x02
     758:	9b 81       	ldd	r25, Y+3	; 0x03
     75a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     75e:	68 83       	st	Y, r22
     760:	79 83       	std	Y+1, r23	; 0x01
     762:	8a 83       	std	Y+2, r24	; 0x02
     764:	9b 83       	std	Y+3, r25	; 0x03
}

Matrix* adde(Matrix* lhs, Matrix* rhs){
	if (lhs->row == rhs->row && lhs->col == rhs->col){
		for (uint8_t r = 0; r < lhs->row; r++){
			for (uint8_t c = 0; c < lhs->col; c++){
     766:	b3 94       	inc	r11
     768:	f8 01       	movw	r30, r16
     76a:	81 81       	ldd	r24, Z+1	; 0x01
     76c:	b8 16       	cp	r11, r24
     76e:	80 f2       	brcs	.-96     	; 0x710 <adde+0x36>
	return temp;
}

Matrix* adde(Matrix* lhs, Matrix* rhs){
	if (lhs->row == rhs->row && lhs->col == rhs->col){
		for (uint8_t r = 0; r < lhs->row; r++){
     770:	a3 94       	inc	r10
     772:	d8 01       	movw	r26, r16
     774:	8c 91       	ld	r24, X
     776:	a8 16       	cp	r10, r24
     778:	18 f0       	brcs	.+6      	; 0x780 <adde+0xa6>
     77a:	0c c0       	rjmp	.+24     	; 0x794 <adde+0xba>
     77c:	a1 2c       	mov	r10, r1
			for (uint8_t c = 0; c < lhs->col; c++){
				lhs->data[r][c] += rhs->data[r][c];
     77e:	91 2c       	mov	r9, r1
}

Matrix* adde(Matrix* lhs, Matrix* rhs){
	if (lhs->row == rhs->row && lhs->col == rhs->col){
		for (uint8_t r = 0; r < lhs->row; r++){
			for (uint8_t c = 0; c < lhs->col; c++){
     780:	f8 01       	movw	r30, r16
     782:	81 81       	ldd	r24, Z+1	; 0x01
     784:	88 23       	and	r24, r24
     786:	a1 f3       	breq	.-24     	; 0x770 <adde+0x96>
				lhs->data[r][c] += rhs->data[r][c];
     788:	ea 2c       	mov	r14, r10
     78a:	f1 2c       	mov	r15, r1
     78c:	ee 0c       	add	r14, r14
     78e:	ff 1c       	adc	r15, r15
     790:	b9 2c       	mov	r11, r9
     792:	be cf       	rjmp	.-132    	; 0x710 <adde+0x36>
			}
		}
	}
	return lhs;
}
     794:	c8 01       	movw	r24, r16
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	df 90       	pop	r13
     7a4:	cf 90       	pop	r12
     7a6:	bf 90       	pop	r11
     7a8:	af 90       	pop	r10
     7aa:	9f 90       	pop	r9
     7ac:	08 95       	ret

000007ae <sube>:

Matrix* sube(Matrix* lhs, Matrix* rhs){
     7ae:	9f 92       	push	r9
     7b0:	af 92       	push	r10
     7b2:	bf 92       	push	r11
     7b4:	cf 92       	push	r12
     7b6:	df 92       	push	r13
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	8c 01       	movw	r16, r24
     7c6:	6b 01       	movw	r12, r22
	if (lhs->row == rhs->row && lhs->col == rhs->col){
     7c8:	dc 01       	movw	r26, r24
     7ca:	8c 91       	ld	r24, X
     7cc:	fb 01       	movw	r30, r22
     7ce:	90 81       	ld	r25, Z
     7d0:	89 13       	cpse	r24, r25
     7d2:	4a c0       	rjmp	.+148    	; 0x868 <sube+0xba>
     7d4:	11 96       	adiw	r26, 0x01	; 1
     7d6:	2c 91       	ld	r18, X
     7d8:	91 81       	ldd	r25, Z+1	; 0x01
     7da:	29 13       	cpse	r18, r25
     7dc:	45 c0       	rjmp	.+138    	; 0x868 <sube+0xba>
		for (uint8_t r = 0; r < lhs->row; r++){
     7de:	81 11       	cpse	r24, r1
     7e0:	37 c0       	rjmp	.+110    	; 0x850 <sube+0xa2>
     7e2:	42 c0       	rjmp	.+132    	; 0x868 <sube+0xba>
			for (uint8_t c = 0; c < lhs->col; c++){
				lhs->data[r][c] -= rhs->data[r][c];
     7e4:	2b 2d       	mov	r18, r11
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	22 0f       	add	r18, r18
     7ea:	33 1f       	adc	r19, r19
     7ec:	22 0f       	add	r18, r18
     7ee:	33 1f       	adc	r19, r19
     7f0:	d8 01       	movw	r26, r16
     7f2:	12 96       	adiw	r26, 0x02	; 2
     7f4:	ed 91       	ld	r30, X+
     7f6:	fc 91       	ld	r31, X
     7f8:	13 97       	sbiw	r26, 0x03	; 3
     7fa:	ee 0d       	add	r30, r14
     7fc:	ff 1d       	adc	r31, r15
     7fe:	c0 81       	ld	r28, Z
     800:	d1 81       	ldd	r29, Z+1	; 0x01
     802:	c2 0f       	add	r28, r18
     804:	d3 1f       	adc	r29, r19
     806:	d6 01       	movw	r26, r12
     808:	12 96       	adiw	r26, 0x02	; 2
     80a:	ed 91       	ld	r30, X+
     80c:	fc 91       	ld	r31, X
     80e:	13 97       	sbiw	r26, 0x03	; 3
     810:	ee 0d       	add	r30, r14
     812:	ff 1d       	adc	r31, r15
     814:	80 81       	ld	r24, Z
     816:	91 81       	ldd	r25, Z+1	; 0x01
     818:	fc 01       	movw	r30, r24
     81a:	e2 0f       	add	r30, r18
     81c:	f3 1f       	adc	r31, r19
     81e:	20 81       	ld	r18, Z
     820:	31 81       	ldd	r19, Z+1	; 0x01
     822:	42 81       	ldd	r20, Z+2	; 0x02
     824:	53 81       	ldd	r21, Z+3	; 0x03
     826:	68 81       	ld	r22, Y
     828:	79 81       	ldd	r23, Y+1	; 0x01
     82a:	8a 81       	ldd	r24, Y+2	; 0x02
     82c:	9b 81       	ldd	r25, Y+3	; 0x03
     82e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     832:	68 83       	st	Y, r22
     834:	79 83       	std	Y+1, r23	; 0x01
     836:	8a 83       	std	Y+2, r24	; 0x02
     838:	9b 83       	std	Y+3, r25	; 0x03
}

Matrix* sube(Matrix* lhs, Matrix* rhs){
	if (lhs->row == rhs->row && lhs->col == rhs->col){
		for (uint8_t r = 0; r < lhs->row; r++){
			for (uint8_t c = 0; c < lhs->col; c++){
     83a:	b3 94       	inc	r11
     83c:	f8 01       	movw	r30, r16
     83e:	81 81       	ldd	r24, Z+1	; 0x01
     840:	b8 16       	cp	r11, r24
     842:	80 f2       	brcs	.-96     	; 0x7e4 <sube+0x36>
	return lhs;
}

Matrix* sube(Matrix* lhs, Matrix* rhs){
	if (lhs->row == rhs->row && lhs->col == rhs->col){
		for (uint8_t r = 0; r < lhs->row; r++){
     844:	a3 94       	inc	r10
     846:	d8 01       	movw	r26, r16
     848:	8c 91       	ld	r24, X
     84a:	a8 16       	cp	r10, r24
     84c:	18 f0       	brcs	.+6      	; 0x854 <sube+0xa6>
     84e:	0c c0       	rjmp	.+24     	; 0x868 <sube+0xba>
     850:	a1 2c       	mov	r10, r1
			for (uint8_t c = 0; c < lhs->col; c++){
				lhs->data[r][c] -= rhs->data[r][c];
     852:	91 2c       	mov	r9, r1
}

Matrix* sube(Matrix* lhs, Matrix* rhs){
	if (lhs->row == rhs->row && lhs->col == rhs->col){
		for (uint8_t r = 0; r < lhs->row; r++){
			for (uint8_t c = 0; c < lhs->col; c++){
     854:	f8 01       	movw	r30, r16
     856:	81 81       	ldd	r24, Z+1	; 0x01
     858:	88 23       	and	r24, r24
     85a:	a1 f3       	breq	.-24     	; 0x844 <sube+0x96>
				lhs->data[r][c] -= rhs->data[r][c];
     85c:	ea 2c       	mov	r14, r10
     85e:	f1 2c       	mov	r15, r1
     860:	ee 0c       	add	r14, r14
     862:	ff 1c       	adc	r15, r15
     864:	b9 2c       	mov	r11, r9
     866:	be cf       	rjmp	.-132    	; 0x7e4 <sube+0x36>
			}
		}
	}
	return lhs;
}
     868:	c8 01       	movw	r24, r16
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	df 90       	pop	r13
     878:	cf 90       	pop	r12
     87a:	bf 90       	pop	r11
     87c:	af 90       	pop	r10
     87e:	9f 90       	pop	r9
     880:	08 95       	ret

00000882 <sub>:
	Matrix temp = copy(lhs);
	adde(&temp, rhs);
	return temp;
}

Matrix sub(Matrix* lhs, Matrix* rhs){
     882:	0f 93       	push	r16
     884:	1f 93       	push	r17
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	00 d0       	rcall	.+0      	; 0x88c <sub+0xa>
     88c:	00 d0       	rcall	.+0      	; 0x88e <sub+0xc>
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	8b 01       	movw	r16, r22
	Matrix temp = copy(lhs);
     894:	0e 94 0b 03 	call	0x616	; 0x616 <copy>
     898:	69 83       	std	Y+1, r22	; 0x01
     89a:	7a 83       	std	Y+2, r23	; 0x02
     89c:	8b 83       	std	Y+3, r24	; 0x03
     89e:	9c 83       	std	Y+4, r25	; 0x04
	sube(&temp, rhs);
     8a0:	b8 01       	movw	r22, r16
     8a2:	ce 01       	movw	r24, r28
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	0e 94 d7 03 	call	0x7ae	; 0x7ae <sube>
	return temp;
     8aa:	69 81       	ldd	r22, Y+1	; 0x01
     8ac:	7a 81       	ldd	r23, Y+2	; 0x02
     8ae:	8b 81       	ldd	r24, Y+3	; 0x03
     8b0:	9c 81       	ldd	r25, Y+4	; 0x04
}
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	08 95       	ret

000008c4 <mul>:

Matrix mul(Matrix* lhs, Matrix* rhs){
     8c4:	2f 92       	push	r2
     8c6:	3f 92       	push	r3
     8c8:	4f 92       	push	r4
     8ca:	5f 92       	push	r5
     8cc:	6f 92       	push	r6
     8ce:	7f 92       	push	r7
     8d0:	8f 92       	push	r8
     8d2:	9f 92       	push	r9
     8d4:	af 92       	push	r10
     8d6:	bf 92       	push	r11
     8d8:	cf 92       	push	r12
     8da:	df 92       	push	r13
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	29 97       	sbiw	r28, 0x09	; 9
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	cd bf       	out	0x3d, r28	; 61
     8f8:	9e 83       	std	Y+6, r25	; 0x06
     8fa:	8d 83       	std	Y+5, r24	; 0x05
     8fc:	78 87       	std	Y+8, r23	; 0x08
     8fe:	6f 83       	std	Y+7, r22	; 0x07
	Matrix returnMatrix;
	if(lhs->col == rhs->row){
     900:	dc 01       	movw	r26, r24
     902:	11 96       	adiw	r26, 0x01	; 1
     904:	9c 91       	ld	r25, X
     906:	11 97       	sbiw	r26, 0x01	; 1
     908:	fb 01       	movw	r30, r22
     90a:	80 81       	ld	r24, Z
     90c:	98 13       	cpse	r25, r24
     90e:	8d c0       	rjmp	.+282    	; 0xa2a <__stack+0x12b>
		mallocMatrix(&returnMatrix, lhs->row, rhs->col);
     910:	41 81       	ldd	r20, Z+1	; 0x01
     912:	6c 91       	ld	r22, X
     914:	ce 01       	movw	r24, r28
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	0e 94 ac 02 	call	0x558	; 0x558 <mallocMatrix>
		for (uint8_t i = 0; i < lhs->row; i++){
     91c:	ad 81       	ldd	r26, Y+5	; 0x05
     91e:	be 81       	ldd	r27, Y+6	; 0x06
     920:	8c 91       	ld	r24, X
     922:	81 11       	cpse	r24, r1
     924:	74 c0       	rjmp	.+232    	; 0xa0e <__stack+0x10f>
     926:	87 c0       	rjmp	.+270    	; 0xa36 <__stack+0x137>
			for (uint8_t j = 0; j < rhs->col; j++){
				double temp = 0;
				for (uint8_t k = 0; k < lhs->col; k++){
					temp += lhs->data[i][k] * rhs->data[k][j];
     928:	f8 01       	movw	r30, r16
     92a:	61 91       	ld	r22, Z+
     92c:	71 91       	ld	r23, Z+
     92e:	81 91       	ld	r24, Z+
     930:	91 91       	ld	r25, Z+
     932:	8f 01       	movw	r16, r30
     934:	d7 01       	movw	r26, r14
     936:	ed 91       	ld	r30, X+
     938:	fd 91       	ld	r31, X+
     93a:	7d 01       	movw	r14, r26
     93c:	ea 0d       	add	r30, r10
     93e:	fb 1d       	adc	r31, r11
     940:	20 81       	ld	r18, Z
     942:	31 81       	ldd	r19, Z+1	; 0x01
     944:	42 81       	ldd	r20, Z+2	; 0x02
     946:	53 81       	ldd	r21, Z+3	; 0x03
     948:	0e 94 80 0b 	call	0x1700	; 0x1700 <__mulsf3>
     94c:	9b 01       	movw	r18, r22
     94e:	ac 01       	movw	r20, r24
     950:	66 2d       	mov	r22, r6
     952:	77 2d       	mov	r23, r7
     954:	88 2d       	mov	r24, r8
     956:	99 2d       	mov	r25, r9
     958:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     95c:	66 2e       	mov	r6, r22
     95e:	77 2e       	mov	r7, r23
     960:	88 2e       	mov	r8, r24
     962:	99 2e       	mov	r9, r25
	if(lhs->col == rhs->row){
		mallocMatrix(&returnMatrix, lhs->row, rhs->col);
		for (uint8_t i = 0; i < lhs->row; i++){
			for (uint8_t j = 0; j < rhs->col; j++){
				double temp = 0;
				for (uint8_t k = 0; k < lhs->col; k++){
     964:	0c 15       	cp	r16, r12
     966:	1d 05       	cpc	r17, r13
     968:	f9 f6       	brne	.-66     	; 0x928 <__stack+0x29>
     96a:	04 c0       	rjmp	.+8      	; 0x974 <__stack+0x75>
     96c:	64 2c       	mov	r6, r4
     96e:	71 2c       	mov	r7, r1
     970:	81 2c       	mov	r8, r1
     972:	91 2c       	mov	r9, r1
					temp += lhs->data[i][k] * rhs->data[k][j];
				}
				returnMatrix.data[i][j] = temp;
     974:	eb 81       	ldd	r30, Y+3	; 0x03
     976:	fc 81       	ldd	r31, Y+4	; 0x04
     978:	e2 0d       	add	r30, r2
     97a:	f3 1d       	adc	r31, r3
     97c:	01 90       	ld	r0, Z+
     97e:	f0 81       	ld	r31, Z
     980:	e0 2d       	mov	r30, r0
     982:	b4 e0       	ldi	r27, 0x04	; 4
     984:	5b 9e       	mul	r5, r27
     986:	e0 0d       	add	r30, r0
     988:	f1 1d       	adc	r31, r1
     98a:	11 24       	eor	r1, r1
     98c:	86 2d       	mov	r24, r6
     98e:	97 2d       	mov	r25, r7
     990:	a8 2d       	mov	r26, r8
     992:	b9 2d       	mov	r27, r9
     994:	80 83       	st	Z, r24
     996:	91 83       	std	Z+1, r25	; 0x01
     998:	a2 83       	std	Z+2, r26	; 0x02
     99a:	b3 83       	std	Z+3, r27	; 0x03
Matrix mul(Matrix* lhs, Matrix* rhs){
	Matrix returnMatrix;
	if(lhs->col == rhs->row){
		mallocMatrix(&returnMatrix, lhs->row, rhs->col);
		for (uint8_t i = 0; i < lhs->row; i++){
			for (uint8_t j = 0; j < rhs->col; j++){
     99c:	53 94       	inc	r5
     99e:	ef 81       	ldd	r30, Y+7	; 0x07
     9a0:	f8 85       	ldd	r31, Y+8	; 0x08
     9a2:	81 81       	ldd	r24, Z+1	; 0x01
     9a4:	58 16       	cp	r5, r24
     9a6:	50 f5       	brcc	.+84     	; 0x9fc <__stack+0xfd>
				double temp = 0;
				for (uint8_t k = 0; k < lhs->col; k++){
     9a8:	ad 81       	ldd	r26, Y+5	; 0x05
     9aa:	be 81       	ldd	r27, Y+6	; 0x06
     9ac:	11 96       	adiw	r26, 0x01	; 1
     9ae:	cc 90       	ld	r12, X
     9b0:	11 97       	sbiw	r26, 0x01	; 1
     9b2:	cc 20       	and	r12, r12
     9b4:	d9 f2       	breq	.-74     	; 0x96c <__stack+0x6d>
					temp += lhs->data[i][k] * rhs->data[k][j];
     9b6:	12 96       	adiw	r26, 0x02	; 2
     9b8:	ed 91       	ld	r30, X+
     9ba:	fc 91       	ld	r31, X
     9bc:	13 97       	sbiw	r26, 0x03	; 3
     9be:	e2 0d       	add	r30, r2
     9c0:	f3 1d       	adc	r31, r3
     9c2:	80 81       	ld	r24, Z
     9c4:	91 81       	ldd	r25, Z+1	; 0x01
     9c6:	a5 2c       	mov	r10, r5
     9c8:	b1 2c       	mov	r11, r1
     9ca:	aa 0c       	add	r10, r10
     9cc:	bb 1c       	adc	r11, r11
     9ce:	aa 0c       	add	r10, r10
     9d0:	bb 1c       	adc	r11, r11
     9d2:	8c 01       	movw	r16, r24
     9d4:	ef 81       	ldd	r30, Y+7	; 0x07
     9d6:	f8 85       	ldd	r31, Y+8	; 0x08
     9d8:	e2 80       	ldd	r14, Z+2	; 0x02
     9da:	f3 80       	ldd	r15, Z+3	; 0x03
     9dc:	ca 94       	dec	r12
     9de:	d1 2c       	mov	r13, r1
     9e0:	ff ef       	ldi	r31, 0xFF	; 255
     9e2:	cf 1a       	sub	r12, r31
     9e4:	df 0a       	sbc	r13, r31
     9e6:	cc 0c       	add	r12, r12
     9e8:	dd 1c       	adc	r13, r13
     9ea:	cc 0c       	add	r12, r12
     9ec:	dd 1c       	adc	r13, r13
     9ee:	c8 0e       	add	r12, r24
     9f0:	d9 1e       	adc	r13, r25
     9f2:	64 2c       	mov	r6, r4
     9f4:	71 2c       	mov	r7, r1
     9f6:	81 2c       	mov	r8, r1
     9f8:	91 2c       	mov	r9, r1
     9fa:	96 cf       	rjmp	.-212    	; 0x928 <__stack+0x29>

Matrix mul(Matrix* lhs, Matrix* rhs){
	Matrix returnMatrix;
	if(lhs->col == rhs->row){
		mallocMatrix(&returnMatrix, lhs->row, rhs->col);
		for (uint8_t i = 0; i < lhs->row; i++){
     9fc:	29 85       	ldd	r18, Y+9	; 0x09
     9fe:	2f 5f       	subi	r18, 0xFF	; 255
     a00:	29 87       	std	Y+9, r18	; 0x09
     a02:	ad 81       	ldd	r26, Y+5	; 0x05
     a04:	be 81       	ldd	r27, Y+6	; 0x06
     a06:	8c 91       	ld	r24, X
     a08:	28 17       	cp	r18, r24
     a0a:	18 f0       	brcs	.+6      	; 0xa12 <__stack+0x113>
     a0c:	14 c0       	rjmp	.+40     	; 0xa36 <__stack+0x137>
     a0e:	19 86       	std	Y+9, r1	; 0x09
			for (uint8_t j = 0; j < rhs->col; j++){
				double temp = 0;
				for (uint8_t k = 0; k < lhs->col; k++){
					temp += lhs->data[i][k] * rhs->data[k][j];
     a10:	41 2c       	mov	r4, r1
Matrix mul(Matrix* lhs, Matrix* rhs){
	Matrix returnMatrix;
	if(lhs->col == rhs->row){
		mallocMatrix(&returnMatrix, lhs->row, rhs->col);
		for (uint8_t i = 0; i < lhs->row; i++){
			for (uint8_t j = 0; j < rhs->col; j++){
     a12:	ef 81       	ldd	r30, Y+7	; 0x07
     a14:	f8 85       	ldd	r31, Y+8	; 0x08
     a16:	81 81       	ldd	r24, Z+1	; 0x01
     a18:	88 23       	and	r24, r24
     a1a:	81 f3       	breq	.-32     	; 0x9fc <__stack+0xfd>
				double temp = 0;
				for (uint8_t k = 0; k < lhs->col; k++){
					temp += lhs->data[i][k] * rhs->data[k][j];
     a1c:	f9 85       	ldd	r31, Y+9	; 0x09
     a1e:	2f 2e       	mov	r2, r31
     a20:	31 2c       	mov	r3, r1
     a22:	22 0c       	add	r2, r2
     a24:	33 1c       	adc	r3, r3
     a26:	51 2c       	mov	r5, r1
     a28:	bf cf       	rjmp	.-130    	; 0x9a8 <__stack+0xa9>
				returnMatrix.data[i][j] = temp;
			}
		}
	}
	else{
		mallocMatrix(&returnMatrix, 0, 0);
     a2a:	40 e0       	ldi	r20, 0x00	; 0
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	ce 01       	movw	r24, r28
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	0e 94 ac 02 	call	0x558	; 0x558 <mallocMatrix>
	}
	return returnMatrix;
     a36:	69 81       	ldd	r22, Y+1	; 0x01
     a38:	7a 81       	ldd	r23, Y+2	; 0x02
     a3a:	8b 81       	ldd	r24, Y+3	; 0x03
     a3c:	9c 81       	ldd	r25, Y+4	; 0x04
}
     a3e:	29 96       	adiw	r28, 0x09	; 9
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	cf 90       	pop	r12
     a5a:	bf 90       	pop	r11
     a5c:	af 90       	pop	r10
     a5e:	9f 90       	pop	r9
     a60:	8f 90       	pop	r8
     a62:	7f 90       	pop	r7
     a64:	6f 90       	pop	r6
     a66:	5f 90       	pop	r5
     a68:	4f 90       	pop	r4
     a6a:	3f 90       	pop	r3
     a6c:	2f 90       	pop	r2
     a6e:	08 95       	ret

00000a70 <mule>:

Matrix* mule(Matrix* lhs, Matrix* rhs){
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	00 d0       	rcall	.+0      	; 0xa7a <mule+0xa>
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <mule+0xc>
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
     a80:	8c 01       	movw	r16, r24
	Matrix temp = *lhs;
     a82:	fc 01       	movw	r30, r24
     a84:	80 81       	ld	r24, Z
     a86:	91 81       	ldd	r25, Z+1	; 0x01
     a88:	a2 81       	ldd	r26, Z+2	; 0x02
     a8a:	b3 81       	ldd	r27, Z+3	; 0x03
     a8c:	89 83       	std	Y+1, r24	; 0x01
     a8e:	9a 83       	std	Y+2, r25	; 0x02
     a90:	ab 83       	std	Y+3, r26	; 0x03
     a92:	bc 83       	std	Y+4, r27	; 0x04
	*lhs = mul(lhs, rhs);
     a94:	c8 01       	movw	r24, r16
     a96:	0e 94 62 04 	call	0x8c4	; 0x8c4 <mul>
     a9a:	f8 01       	movw	r30, r16
     a9c:	60 83       	st	Z, r22
     a9e:	71 83       	std	Z+1, r23	; 0x01
     aa0:	82 83       	std	Z+2, r24	; 0x02
     aa2:	93 83       	std	Z+3, r25	; 0x03
	freeMatrix(&temp);
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <freeMatrix>
	return lhs;
}
     aac:	c8 01       	movw	r24, r16
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	08 95       	ret

00000ac0 <scale>:

Matrix* scale(Matrix* lhs, double rhs){
     ac0:	7f 92       	push	r7
     ac2:	8f 92       	push	r8
     ac4:	9f 92       	push	r9
     ac6:	af 92       	push	r10
     ac8:	bf 92       	push	r11
     aca:	cf 92       	push	r12
     acc:	df 92       	push	r13
     ace:	ef 92       	push	r14
     ad0:	ff 92       	push	r15
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	7c 01       	movw	r14, r24
     adc:	4a 01       	movw	r8, r20
     ade:	5b 01       	movw	r10, r22
	for (uint8_t r = 0; r < lhs->row; r++){
     ae0:	dc 01       	movw	r26, r24
     ae2:	8c 91       	ld	r24, X
     ae4:	81 11       	cpse	r24, r1
     ae6:	26 c0       	rjmp	.+76     	; 0xb34 <scale+0x74>
     ae8:	31 c0       	rjmp	.+98     	; 0xb4c <scale+0x8c>
		for (uint8_t c = 0; c < lhs->col; c++){
			lhs->data[r][c] *= rhs;
     aea:	d7 01       	movw	r26, r14
     aec:	12 96       	adiw	r26, 0x02	; 2
     aee:	ed 91       	ld	r30, X+
     af0:	fc 91       	ld	r31, X
     af2:	13 97       	sbiw	r26, 0x03	; 3
     af4:	ec 0d       	add	r30, r12
     af6:	fd 1d       	adc	r31, r13
     af8:	c0 81       	ld	r28, Z
     afa:	d1 81       	ldd	r29, Z+1	; 0x01
     afc:	b4 e0       	ldi	r27, 0x04	; 4
     afe:	1b 9f       	mul	r17, r27
     b00:	c0 0d       	add	r28, r0
     b02:	d1 1d       	adc	r29, r1
     b04:	11 24       	eor	r1, r1
     b06:	a5 01       	movw	r20, r10
     b08:	94 01       	movw	r18, r8
     b0a:	68 81       	ld	r22, Y
     b0c:	79 81       	ldd	r23, Y+1	; 0x01
     b0e:	8a 81       	ldd	r24, Y+2	; 0x02
     b10:	9b 81       	ldd	r25, Y+3	; 0x03
     b12:	0e 94 80 0b 	call	0x1700	; 0x1700 <__mulsf3>
     b16:	68 83       	st	Y, r22
     b18:	79 83       	std	Y+1, r23	; 0x01
     b1a:	8a 83       	std	Y+2, r24	; 0x02
     b1c:	9b 83       	std	Y+3, r25	; 0x03
	return lhs;
}

Matrix* scale(Matrix* lhs, double rhs){
	for (uint8_t r = 0; r < lhs->row; r++){
		for (uint8_t c = 0; c < lhs->col; c++){
     b1e:	1f 5f       	subi	r17, 0xFF	; 255
     b20:	f7 01       	movw	r30, r14
     b22:	81 81       	ldd	r24, Z+1	; 0x01
     b24:	18 17       	cp	r17, r24
     b26:	08 f3       	brcs	.-62     	; 0xaea <scale+0x2a>
	freeMatrix(&temp);
	return lhs;
}

Matrix* scale(Matrix* lhs, double rhs){
	for (uint8_t r = 0; r < lhs->row; r++){
     b28:	0f 5f       	subi	r16, 0xFF	; 255
     b2a:	d7 01       	movw	r26, r14
     b2c:	8c 91       	ld	r24, X
     b2e:	08 17       	cp	r16, r24
     b30:	18 f0       	brcs	.+6      	; 0xb38 <scale+0x78>
     b32:	0c c0       	rjmp	.+24     	; 0xb4c <scale+0x8c>
     b34:	00 e0       	ldi	r16, 0x00	; 0
		for (uint8_t c = 0; c < lhs->col; c++){
			lhs->data[r][c] *= rhs;
     b36:	71 2c       	mov	r7, r1
	return lhs;
}

Matrix* scale(Matrix* lhs, double rhs){
	for (uint8_t r = 0; r < lhs->row; r++){
		for (uint8_t c = 0; c < lhs->col; c++){
     b38:	f7 01       	movw	r30, r14
     b3a:	81 81       	ldd	r24, Z+1	; 0x01
     b3c:	88 23       	and	r24, r24
     b3e:	a1 f3       	breq	.-24     	; 0xb28 <scale+0x68>
			lhs->data[r][c] *= rhs;
     b40:	c0 2e       	mov	r12, r16
     b42:	d1 2c       	mov	r13, r1
     b44:	cc 0c       	add	r12, r12
     b46:	dd 1c       	adc	r13, r13
     b48:	17 2d       	mov	r17, r7
     b4a:	cf cf       	rjmp	.-98     	; 0xaea <scale+0x2a>
		}
	}
	return lhs;
}
     b4c:	c7 01       	movw	r24, r14
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	cf 90       	pop	r12
     b5e:	bf 90       	pop	r11
     b60:	af 90       	pop	r10
     b62:	9f 90       	pop	r9
     b64:	8f 90       	pop	r8
     b66:	7f 90       	pop	r7
     b68:	08 95       	ret

00000b6a <Determinant>:
	return m;
}


//find determinant
double Determinant(double **a, uint8_t n){
     b6a:	2f 92       	push	r2
     b6c:	3f 92       	push	r3
     b6e:	4f 92       	push	r4
     b70:	5f 92       	push	r5
     b72:	6f 92       	push	r6
     b74:	7f 92       	push	r7
     b76:	8f 92       	push	r8
     b78:	9f 92       	push	r9
     b7a:	af 92       	push	r10
     b7c:	bf 92       	push	r11
     b7e:	cf 92       	push	r12
     b80:	df 92       	push	r13
     b82:	ef 92       	push	r14
     b84:	ff 92       	push	r15
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	60 97       	sbiw	r28, 0x10	; 16
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	9e 83       	std	Y+6, r25	; 0x06
     ba0:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t i, j, j1, j2;
	double det = 0;
	double **m = NULL;

	if (n < 1) { /* Error */
     ba2:	66 23       	and	r22, r22
     ba4:	09 f4       	brne	.+2      	; 0xba8 <Determinant+0x3e>
     ba6:	36 c1       	rjmp	.+620    	; 0xe14 <Determinant+0x2aa>
		det = 0;
	}
	
	else if (n == 1) { /* Shouldn't get used */
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	68 13       	cpse	r22, r24
     bac:	0f c0       	rjmp	.+30     	; 0xbcc <Determinant+0x62>
		det = a[0][0];
     bae:	ad 81       	ldd	r26, Y+5	; 0x05
     bb0:	be 81       	ldd	r27, Y+6	; 0x06
     bb2:	2d 91       	ld	r18, X+
     bb4:	3c 91       	ld	r19, X
     bb6:	d9 01       	movw	r26, r18
     bb8:	8d 91       	ld	r24, X+
     bba:	9d 91       	ld	r25, X+
     bbc:	0d 90       	ld	r0, X+
     bbe:	bc 91       	ld	r27, X
     bc0:	a0 2d       	mov	r26, r0
     bc2:	89 83       	std	Y+1, r24	; 0x01
     bc4:	9a 83       	std	Y+2, r25	; 0x02
     bc6:	ab 83       	std	Y+3, r26	; 0x03
     bc8:	bc 83       	std	Y+4, r27	; 0x04
     bca:	28 c1       	rjmp	.+592    	; 0xe1c <Determinant+0x2b2>
	}
	
	else if (n == 2) {
     bcc:	b2 e0       	ldi	r27, 0x02	; 2
     bce:	6b 13       	cpse	r22, r27
     bd0:	2f c0       	rjmp	.+94     	; 0xc30 <Determinant+0xc6>
		det = a[0][0] * a[1][1] - a[1][0] * a[0][1];
     bd2:	ed 81       	ldd	r30, Y+5	; 0x05
     bd4:	fe 81       	ldd	r31, Y+6	; 0x06
     bd6:	00 81       	ld	r16, Z
     bd8:	11 81       	ldd	r17, Z+1	; 0x01
     bda:	a2 80       	ldd	r10, Z+2	; 0x02
     bdc:	b3 80       	ldd	r11, Z+3	; 0x03
     bde:	d5 01       	movw	r26, r10
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	2d 91       	ld	r18, X+
     be4:	3d 91       	ld	r19, X+
     be6:	4d 91       	ld	r20, X+
     be8:	5c 91       	ld	r21, X
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	f8 01       	movw	r30, r16
     bee:	60 81       	ld	r22, Z
     bf0:	71 81       	ldd	r23, Z+1	; 0x01
     bf2:	82 81       	ldd	r24, Z+2	; 0x02
     bf4:	93 81       	ldd	r25, Z+3	; 0x03
     bf6:	0e 94 80 0b 	call	0x1700	; 0x1700 <__mulsf3>
     bfa:	6b 01       	movw	r12, r22
     bfc:	7c 01       	movw	r14, r24
     bfe:	d8 01       	movw	r26, r16
     c00:	14 96       	adiw	r26, 0x04	; 4
     c02:	2d 91       	ld	r18, X+
     c04:	3d 91       	ld	r19, X+
     c06:	4d 91       	ld	r20, X+
     c08:	5c 91       	ld	r21, X
     c0a:	17 97       	sbiw	r26, 0x07	; 7
     c0c:	f5 01       	movw	r30, r10
     c0e:	60 81       	ld	r22, Z
     c10:	71 81       	ldd	r23, Z+1	; 0x01
     c12:	82 81       	ldd	r24, Z+2	; 0x02
     c14:	93 81       	ldd	r25, Z+3	; 0x03
     c16:	0e 94 80 0b 	call	0x1700	; 0x1700 <__mulsf3>
     c1a:	9b 01       	movw	r18, r22
     c1c:	ac 01       	movw	r20, r24
     c1e:	c7 01       	movw	r24, r14
     c20:	b6 01       	movw	r22, r12
     c22:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     c26:	69 83       	std	Y+1, r22	; 0x01
     c28:	7a 83       	std	Y+2, r23	; 0x02
     c2a:	8b 83       	std	Y+3, r24	; 0x03
     c2c:	9c 83       	std	Y+4, r25	; 0x04
     c2e:	f6 c0       	rjmp	.+492    	; 0xe1c <Determinant+0x2b2>
	}
	
	else {
		det = 0;
		for (j1 = 0; j1<n; j1++) {
			m = (double**) malloc((n-1) * sizeof(double*));
     c30:	06 2f       	mov	r16, r22
     c32:	10 e0       	ldi	r17, 0x00	; 0
     c34:	01 50       	subi	r16, 0x01	; 1
     c36:	11 09       	sbc	r17, r1
     c38:	c8 01       	movw	r24, r16
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	98 87       	std	Y+8, r25	; 0x08
     c40:	8f 83       	std	Y+7, r24	; 0x07
			for (i = 0; i < n - 1; i++){
				m[i] = (double*) malloc((n - 1) * sizeof(double));
     c42:	18 01       	movw	r2, r16
     c44:	22 0c       	add	r2, r2
     c46:	33 1c       	adc	r3, r3
     c48:	22 0c       	add	r2, r2
     c4a:	33 1c       	adc	r3, r3
     c4c:	81 2c       	mov	r8, r1
     c4e:	91 2c       	mov	r9, r1
     c50:	19 82       	std	Y+1, r1	; 0x01
     c52:	1a 82       	std	Y+2, r1	; 0x02
     c54:	1b 82       	std	Y+3, r1	; 0x03
     c56:	1c 82       	std	Y+4, r1	; 0x04
     c58:	61 2c       	mov	r6, r1
	
	else {
		det = 0;
		for (j1 = 0; j1<n; j1++) {
			m = (double**) malloc((n-1) * sizeof(double*));
			for (i = 0; i < n - 1; i++){
     c5a:	a1 2c       	mov	r10, r1
     c5c:	9d 81       	ldd	r25, Y+5	; 0x05
     c5e:	9a 87       	std	Y+10, r25	; 0x0a
     c60:	ae 81       	ldd	r26, Y+6	; 0x06
     c62:	ab 87       	std	Y+11, r26	; 0x0b
     c64:	b1 2c       	mov	r11, r1
     c66:	c1 2c       	mov	r12, r1
     c68:	da 2c       	mov	r13, r10
			
			if(j1 % 2){
				det -= a[0][j1] * Determinant(m, n - 1);
			}
			else{
				det += a[0][j1] * Determinant(m, n - 1);
     c6a:	bf ef       	ldi	r27, 0xFF	; 255
     c6c:	b6 0f       	add	r27, r22
     c6e:	b9 87       	std	Y+9, r27	; 0x09
     c70:	78 01       	movw	r14, r16
     c72:	6d 86       	std	Y+13, r6	; 0x0d
     c74:	6c 87       	std	Y+12, r22	; 0x0c
	}
	
	else {
		det = 0;
		for (j1 = 0; j1<n; j1++) {
			m = (double**) malloc((n-1) * sizeof(double*));
     c76:	8f 81       	ldd	r24, Y+7	; 0x07
     c78:	98 85       	ldd	r25, Y+8	; 0x08
     c7a:	0e 94 ed 0b 	call	0x17da	; 0x17da <malloc>
     c7e:	8c 01       	movw	r16, r24
			for (i = 0; i < n - 1; i++){
     c80:	1e 14       	cp	r1, r14
     c82:	1f 04       	cpc	r1, r15
     c84:	b4 f4       	brge	.+44     	; 0xcb2 <Determinant+0x148>
     c86:	7a 2c       	mov	r7, r10
     c88:	5d 84       	ldd	r5, Y+13	; 0x0d
     c8a:	6c 84       	ldd	r6, Y+12	; 0x0c
				m[i] = (double*) malloc((n - 1) * sizeof(double));
     c8c:	c1 01       	movw	r24, r2
     c8e:	0e 94 ed 0b 	call	0x17da	; 0x17da <malloc>
     c92:	e7 2d       	mov	r30, r7
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	ee 0f       	add	r30, r30
     c98:	ff 1f       	adc	r31, r31
     c9a:	e0 0f       	add	r30, r16
     c9c:	f1 1f       	adc	r31, r17
     c9e:	91 83       	std	Z+1, r25	; 0x01
     ca0:	80 83       	st	Z, r24
	
	else {
		det = 0;
		for (j1 = 0; j1<n; j1++) {
			m = (double**) malloc((n-1) * sizeof(double*));
			for (i = 0; i < n - 1; i++){
     ca2:	73 94       	inc	r7
     ca4:	87 2d       	mov	r24, r7
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	8e 15       	cp	r24, r14
     caa:	9f 05       	cpc	r25, r15
     cac:	7c f3       	brlt	.-34     	; 0xc8c <Determinant+0x122>
     cae:	5d 86       	std	Y+13, r5	; 0x0d
     cb0:	6c 86       	std	Y+12, r6	; 0x0c
				m[i] = (double*) malloc((n - 1) * sizeof(double));
			}
			for (i = 1; i<n; i++) {
     cb2:	ec 85       	ldd	r30, Y+12	; 0x0c
     cb4:	e2 30       	cpi	r30, 0x02	; 2
     cb6:	08 f4       	brcc	.+2      	; 0xcba <Determinant+0x150>
     cb8:	44 c0       	rjmp	.+136    	; 0xd42 <Determinant+0x1d8>
     cba:	a8 01       	movw	r20, r16
     cbc:	aa 85       	ldd	r26, Y+10	; 0x0a
     cbe:	bb 85       	ldd	r27, Y+11	; 0x0b
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	27 01       	movw	r4, r14
     cc4:	38 01       	movw	r6, r16
     cc6:	f6 2e       	mov	r15, r22
     cc8:	0d 85       	ldd	r16, Y+13	; 0x0d
     cca:	1e 2f       	mov	r17, r30
     ccc:	bd 01       	movw	r22, r26
     cce:	da 01       	movw	r26, r20
     cd0:	2b c0       	rjmp	.+86     	; 0xd28 <Determinant+0x1be>
				j2 = 0;
				for (j = 0; j<n; j++) {
					if (j == j1){
     cd2:	80 17       	cp	r24, r16
     cd4:	d1 f0       	breq	.+52     	; 0xd0a <Determinant+0x1a0>
						continue;
					}
					m[i - 1][j2] = a[i][j];
     cd6:	ad 85       	ldd	r26, Y+13	; 0x0d
     cd8:	be 85       	ldd	r27, Y+14	; 0x0e
     cda:	12 96       	adiw	r26, 0x02	; 2
     cdc:	ed 91       	ld	r30, X+
     cde:	fc 91       	ld	r31, X
     ce0:	13 97       	sbiw	r26, 0x03	; 3
     ce2:	e2 0f       	add	r30, r18
     ce4:	f3 1f       	adc	r31, r19
     ce6:	40 81       	ld	r20, Z
     ce8:	51 81       	ldd	r21, Z+1	; 0x01
     cea:	62 81       	ldd	r22, Z+2	; 0x02
     cec:	73 81       	ldd	r23, Z+3	; 0x03
     cee:	af 85       	ldd	r26, Y+15	; 0x0f
     cf0:	b8 89       	ldd	r27, Y+16	; 0x10
     cf2:	ed 91       	ld	r30, X+
     cf4:	fc 91       	ld	r31, X
     cf6:	b4 e0       	ldi	r27, 0x04	; 4
     cf8:	9b 9f       	mul	r25, r27
     cfa:	e0 0d       	add	r30, r0
     cfc:	f1 1d       	adc	r31, r1
     cfe:	11 24       	eor	r1, r1
     d00:	40 83       	st	Z, r20
     d02:	51 83       	std	Z+1, r21	; 0x01
     d04:	62 83       	std	Z+2, r22	; 0x02
     d06:	73 83       	std	Z+3, r23	; 0x03
					j2++;
     d08:	9f 5f       	subi	r25, 0xFF	; 255
			for (i = 0; i < n - 1; i++){
				m[i] = (double*) malloc((n - 1) * sizeof(double));
			}
			for (i = 1; i<n; i++) {
				j2 = 0;
				for (j = 0; j<n; j++) {
     d0a:	8f 5f       	subi	r24, 0xFF	; 255
     d0c:	2c 5f       	subi	r18, 0xFC	; 252
     d0e:	3f 4f       	sbci	r19, 0xFF	; 255
     d10:	81 13       	cpse	r24, r17
     d12:	df cf       	rjmp	.-66     	; 0xcd2 <Determinant+0x168>
     d14:	af 85       	ldd	r26, Y+15	; 0x0f
     d16:	b8 89       	ldd	r27, Y+16	; 0x10
     d18:	6d 85       	ldd	r22, Y+13	; 0x0d
     d1a:	7e 85       	ldd	r23, Y+14	; 0x0e
		for (j1 = 0; j1<n; j1++) {
			m = (double**) malloc((n-1) * sizeof(double*));
			for (i = 0; i < n - 1; i++){
				m[i] = (double*) malloc((n - 1) * sizeof(double));
			}
			for (i = 1; i<n; i++) {
     d1c:	f3 94       	inc	r15
     d1e:	12 96       	adiw	r26, 0x02	; 2
     d20:	6e 5f       	subi	r22, 0xFE	; 254
     d22:	7f 4f       	sbci	r23, 0xFF	; 255
     d24:	f1 16       	cp	r15, r17
     d26:	49 f0       	breq	.+18     	; 0xd3a <Determinant+0x1d0>
	
	else {
		det = 0;
		for (j1 = 0; j1<n; j1++) {
			m = (double**) malloc((n-1) * sizeof(double*));
			for (i = 0; i < n - 1; i++){
     d28:	2b 2d       	mov	r18, r11
     d2a:	3c 2d       	mov	r19, r12
     d2c:	9d 2d       	mov	r25, r13
     d2e:	8d 2d       	mov	r24, r13
     d30:	b8 8b       	std	Y+16, r27	; 0x10
     d32:	af 87       	std	Y+15, r26	; 0x0f
     d34:	7e 87       	std	Y+14, r23	; 0x0e
     d36:	6d 87       	std	Y+13, r22	; 0x0d
     d38:	cc cf       	rjmp	.-104    	; 0xcd2 <Determinant+0x168>
     d3a:	72 01       	movw	r14, r4
     d3c:	0d 87       	std	Y+13, r16	; 0x0d
     d3e:	1c 87       	std	Y+12, r17	; 0x0c
     d40:	83 01       	movw	r16, r6
					m[i - 1][j2] = a[i][j];
					j2++;
				}
			}
			
			if(j1 % 2){
     d42:	ed 85       	ldd	r30, Y+13	; 0x0d
     d44:	e0 ff       	sbrs	r30, 0
     d46:	21 c0       	rjmp	.+66     	; 0xd8a <Determinant+0x220>
				det -= a[0][j1] * Determinant(m, n - 1);
     d48:	ad 81       	ldd	r26, Y+5	; 0x05
     d4a:	be 81       	ldd	r27, Y+6	; 0x06
     d4c:	ed 91       	ld	r30, X+
     d4e:	fc 91       	ld	r31, X
     d50:	e8 0d       	add	r30, r8
     d52:	f9 1d       	adc	r31, r9
     d54:	40 80       	ld	r4, Z
     d56:	51 80       	ldd	r5, Z+1	; 0x01
     d58:	62 80       	ldd	r6, Z+2	; 0x02
     d5a:	73 80       	ldd	r7, Z+3	; 0x03
     d5c:	69 85       	ldd	r22, Y+9	; 0x09
     d5e:	c8 01       	movw	r24, r16
     d60:	0e 94 b5 05 	call	0xb6a	; 0xb6a <Determinant>
     d64:	9b 01       	movw	r18, r22
     d66:	ac 01       	movw	r20, r24
     d68:	c3 01       	movw	r24, r6
     d6a:	b2 01       	movw	r22, r4
     d6c:	0e 94 80 0b 	call	0x1700	; 0x1700 <__mulsf3>
     d70:	9b 01       	movw	r18, r22
     d72:	ac 01       	movw	r20, r24
     d74:	69 81       	ldd	r22, Y+1	; 0x01
     d76:	7a 81       	ldd	r23, Y+2	; 0x02
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	9c 81       	ldd	r25, Y+4	; 0x04
     d7c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     d80:	69 83       	std	Y+1, r22	; 0x01
     d82:	7a 83       	std	Y+2, r23	; 0x02
     d84:	8b 83       	std	Y+3, r24	; 0x03
     d86:	9c 83       	std	Y+4, r25	; 0x04
     d88:	20 c0       	rjmp	.+64     	; 0xdca <Determinant+0x260>
			}
			else{
				det += a[0][j1] * Determinant(m, n - 1);
     d8a:	ad 81       	ldd	r26, Y+5	; 0x05
     d8c:	be 81       	ldd	r27, Y+6	; 0x06
     d8e:	ed 91       	ld	r30, X+
     d90:	fc 91       	ld	r31, X
     d92:	e8 0d       	add	r30, r8
     d94:	f9 1d       	adc	r31, r9
     d96:	40 80       	ld	r4, Z
     d98:	51 80       	ldd	r5, Z+1	; 0x01
     d9a:	62 80       	ldd	r6, Z+2	; 0x02
     d9c:	73 80       	ldd	r7, Z+3	; 0x03
     d9e:	69 85       	ldd	r22, Y+9	; 0x09
     da0:	c8 01       	movw	r24, r16
     da2:	0e 94 b5 05 	call	0xb6a	; 0xb6a <Determinant>
     da6:	9b 01       	movw	r18, r22
     da8:	ac 01       	movw	r20, r24
     daa:	c3 01       	movw	r24, r6
     dac:	b2 01       	movw	r22, r4
     dae:	0e 94 80 0b 	call	0x1700	; 0x1700 <__mulsf3>
     db2:	9b 01       	movw	r18, r22
     db4:	ac 01       	movw	r20, r24
     db6:	69 81       	ldd	r22, Y+1	; 0x01
     db8:	7a 81       	ldd	r23, Y+2	; 0x02
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	9c 81       	ldd	r25, Y+4	; 0x04
     dbe:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     dc2:	69 83       	std	Y+1, r22	; 0x01
     dc4:	7a 83       	std	Y+2, r23	; 0x02
     dc6:	8b 83       	std	Y+3, r24	; 0x03
     dc8:	9c 83       	std	Y+4, r25	; 0x04
			}
			
			for (i = 0; i<n - 1; i++){
     dca:	1e 14       	cp	r1, r14
     dcc:	1f 04       	cpc	r1, r15
     dce:	ac f4       	brge	.+42     	; 0xdfa <Determinant+0x290>
     dd0:	5a 2c       	mov	r5, r10
     dd2:	6d 84       	ldd	r6, Y+13	; 0x0d
     dd4:	7c 84       	ldd	r7, Y+12	; 0x0c
				free(m[i]);
     dd6:	e5 2d       	mov	r30, r5
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	ee 0f       	add	r30, r30
     ddc:	ff 1f       	adc	r31, r31
     dde:	e0 0f       	add	r30, r16
     de0:	f1 1f       	adc	r31, r17
     de2:	80 81       	ld	r24, Z
     de4:	91 81       	ldd	r25, Z+1	; 0x01
     de6:	0e 94 82 0c 	call	0x1904	; 0x1904 <free>
			}
			else{
				det += a[0][j1] * Determinant(m, n - 1);
			}
			
			for (i = 0; i<n - 1; i++){
     dea:	53 94       	inc	r5
     dec:	85 2d       	mov	r24, r5
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	8e 15       	cp	r24, r14
     df2:	9f 05       	cpc	r25, r15
     df4:	84 f3       	brlt	.-32     	; 0xdd6 <Determinant+0x26c>
     df6:	6d 86       	std	Y+13, r6	; 0x0d
     df8:	7c 86       	std	Y+12, r7	; 0x0c
				free(m[i]);
			}
			free(m);
     dfa:	c8 01       	movw	r24, r16
     dfc:	0e 94 82 0c 	call	0x1904	; 0x1904 <free>
		det = a[0][0] * a[1][1] - a[1][0] * a[0][1];
	}
	
	else {
		det = 0;
		for (j1 = 0; j1<n; j1++) {
     e00:	bd 85       	ldd	r27, Y+13	; 0x0d
     e02:	bf 5f       	subi	r27, 0xFF	; 255
     e04:	bd 87       	std	Y+13, r27	; 0x0d
     e06:	e4 e0       	ldi	r30, 0x04	; 4
     e08:	8e 0e       	add	r8, r30
     e0a:	91 1c       	adc	r9, r1
     e0c:	fc 85       	ldd	r31, Y+12	; 0x0c
     e0e:	bf 13       	cpse	r27, r31
     e10:	32 cf       	rjmp	.-412    	; 0xc76 <Determinant+0x10c>
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <Determinant+0x2b2>
	uint8_t i, j, j1, j2;
	double det = 0;
	double **m = NULL;

	if (n < 1) { /* Error */
		det = 0;
     e14:	19 82       	std	Y+1, r1	; 0x01
     e16:	1a 82       	std	Y+2, r1	; 0x02
     e18:	1b 82       	std	Y+3, r1	; 0x03
     e1a:	1c 82       	std	Y+4, r1	; 0x04
			}
			free(m);
		}
	}
	return(det);
}
     e1c:	69 81       	ldd	r22, Y+1	; 0x01
     e1e:	7a 81       	ldd	r23, Y+2	; 0x02
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	9c 81       	ldd	r25, Y+4	; 0x04
     e24:	60 96       	adiw	r28, 0x10	; 16
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	ff 90       	pop	r15
     e3a:	ef 90       	pop	r14
     e3c:	df 90       	pop	r13
     e3e:	cf 90       	pop	r12
     e40:	bf 90       	pop	r11
     e42:	af 90       	pop	r10
     e44:	9f 90       	pop	r9
     e46:	8f 90       	pop	r8
     e48:	7f 90       	pop	r7
     e4a:	6f 90       	pop	r6
     e4c:	5f 90       	pop	r5
     e4e:	4f 90       	pop	r4
     e50:	3f 90       	pop	r3
     e52:	2f 90       	pop	r2
     e54:	08 95       	ret

00000e56 <det>:
	}
	return lhs;
}

double det(Matrix* m){
	if (m->col == m->row){
     e56:	fc 01       	movw	r30, r24
     e58:	61 81       	ldd	r22, Z+1	; 0x01
     e5a:	20 81       	ld	r18, Z
     e5c:	62 13       	cpse	r22, r18
     e5e:	05 c0       	rjmp	.+10     	; 0xe6a <det+0x14>
		return Determinant(m->data, m->row);
     e60:	82 81       	ldd	r24, Z+2	; 0x02
     e62:	93 81       	ldd	r25, Z+3	; 0x03
     e64:	0e 94 b5 05 	call	0xb6a	; 0xb6a <Determinant>
     e68:	08 95       	ret
	}
	return 0;
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	cb 01       	movw	r24, r22
}
     e70:	08 95       	ret

00000e72 <CoFactor>:
	return(det);
}


//Find the cofactor matrix of a square matrix
void CoFactor(double **a, uint8_t n, double **b){
     e72:	2f 92       	push	r2
     e74:	3f 92       	push	r3
     e76:	4f 92       	push	r4
     e78:	5f 92       	push	r5
     e7a:	6f 92       	push	r6
     e7c:	7f 92       	push	r7
     e7e:	8f 92       	push	r8
     e80:	9f 92       	push	r9
     e82:	af 92       	push	r10
     e84:	bf 92       	push	r11
     e86:	cf 92       	push	r12
     e88:	df 92       	push	r13
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	60 97       	sbiw	r28, 0x10	; 16
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
     ea6:	a8 2e       	mov	r10, r24
     ea8:	b9 2e       	mov	r11, r25
     eaa:	f6 2e       	mov	r15, r22
     eac:	c4 2e       	mov	r12, r20
     eae:	d5 2e       	mov	r13, r21
	uint8_t i, j, ii, jj, i1, j1;
	double det;
	double **c;

	c = (double**) malloc((n-1) * sizeof(double*));
     eb0:	86 2f       	mov	r24, r22
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	9c 01       	movw	r18, r24
     eb6:	21 50       	subi	r18, 0x01	; 1
     eb8:	31 09       	sbc	r19, r1
     eba:	3a 87       	std	Y+10, r19	; 0x0a
     ebc:	29 87       	std	Y+9, r18	; 0x09
     ebe:	c9 01       	movw	r24, r18
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0e 94 ed 0b 	call	0x17da	; 0x17da <malloc>
     ec8:	3c 01       	movw	r6, r24
	for (i = 0; i<n - 1; i++){
     eca:	89 85       	ldd	r24, Y+9	; 0x09
     ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ece:	18 16       	cp	r1, r24
     ed0:	19 06       	cpc	r1, r25
     ed2:	0c f0       	brlt	.+2      	; 0xed6 <CoFactor+0x64>
     ed4:	cb c0       	rjmp	.+406    	; 0x106c <CoFactor+0x1fa>
		c[i] = (double*) malloc((n-1) * sizeof(double));
     ed6:	8c 01       	movw	r16, r24
     ed8:	00 0f       	add	r16, r16
     eda:	11 1f       	adc	r17, r17
     edc:	00 0f       	add	r16, r16
     ede:	11 1f       	adc	r17, r17
     ee0:	e1 2c       	mov	r14, r1
     ee2:	c8 01       	movw	r24, r16
     ee4:	0e 94 ed 0b 	call	0x17da	; 0x17da <malloc>
     ee8:	ee 2d       	mov	r30, r14
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	e6 0d       	add	r30, r6
     ef2:	f7 1d       	adc	r31, r7
     ef4:	91 83       	std	Z+1, r25	; 0x01
     ef6:	80 83       	st	Z, r24
	uint8_t i, j, ii, jj, i1, j1;
	double det;
	double **c;

	c = (double**) malloc((n-1) * sizeof(double*));
	for (i = 0; i<n - 1; i++){
     ef8:	e3 94       	inc	r14
     efa:	8e 2d       	mov	r24, r14
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	a9 85       	ldd	r26, Y+9	; 0x09
     f00:	ba 85       	ldd	r27, Y+10	; 0x0a
     f02:	8a 17       	cp	r24, r26
     f04:	9b 07       	cpc	r25, r27
     f06:	6c f3       	brlt	.-38     	; 0xee2 <CoFactor+0x70>
     f08:	b4 c0       	rjmp	.+360    	; 0x1072 <CoFactor+0x200>
	for (j = 0; j < n; j++) {
		for (i = 0; i < n; i++) {
			//Form the adjoint a_ij
			i1 = 0;
			for (ii = 0; ii < n; ii++) {
				if (ii == i){
     f0a:	81 17       	cp	r24, r17
     f0c:	81 f1       	breq	.+96     	; 0xf6e <CoFactor+0xfc>
				j1 = 0;
				for (jj = 0; jj < n; jj++) {
					if (jj == j){
						continue;
					}
					c[i1][j1] = a[ii][jj];
     f0e:	a5 2f       	mov	r26, r21
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	aa 0f       	add	r26, r26
     f14:	bb 1f       	adc	r27, r27
     f16:	a6 0d       	add	r26, r6
     f18:	b7 1d       	adc	r27, r7
     f1a:	25 2d       	mov	r18, r5
     f1c:	34 2d       	mov	r19, r4
     f1e:	4c 2d       	mov	r20, r12
     f20:	9c 2d       	mov	r25, r12
     f22:	7e 87       	std	Y+14, r23	; 0x0e
     f24:	6d 87       	std	Y+13, r22	; 0x0d
     f26:	b8 8b       	std	Y+16, r27	; 0x10
     f28:	af 87       	std	Y+15, r26	; 0x0f
				if (ii == i){
					continue;
				}
				j1 = 0;
				for (jj = 0; jj < n; jj++) {
					if (jj == j){
     f2a:	9e 15       	cp	r25, r14
     f2c:	c1 f0       	breq	.+48     	; 0xf5e <CoFactor+0xec>
						continue;
					}
					c[i1][j1] = a[ii][jj];
     f2e:	ad 85       	ldd	r26, Y+13	; 0x0d
     f30:	be 85       	ldd	r27, Y+14	; 0x0e
     f32:	ed 91       	ld	r30, X+
     f34:	fc 91       	ld	r31, X
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	80 80       	ld	r8, Z
     f3c:	91 80       	ldd	r9, Z+1	; 0x01
     f3e:	a2 80       	ldd	r10, Z+2	; 0x02
     f40:	b3 80       	ldd	r11, Z+3	; 0x03
     f42:	af 85       	ldd	r26, Y+15	; 0x0f
     f44:	b8 89       	ldd	r27, Y+16	; 0x10
     f46:	ed 91       	ld	r30, X+
     f48:	fc 91       	ld	r31, X
     f4a:	b4 e0       	ldi	r27, 0x04	; 4
     f4c:	4b 9f       	mul	r20, r27
     f4e:	e0 0d       	add	r30, r0
     f50:	f1 1d       	adc	r31, r1
     f52:	11 24       	eor	r1, r1
     f54:	80 82       	st	Z, r8
     f56:	91 82       	std	Z+1, r9	; 0x01
     f58:	a2 82       	std	Z+2, r10	; 0x02
     f5a:	b3 82       	std	Z+3, r11	; 0x03
					j1++;
     f5c:	4f 5f       	subi	r20, 0xFF	; 255
			for (ii = 0; ii < n; ii++) {
				if (ii == i){
					continue;
				}
				j1 = 0;
				for (jj = 0; jj < n; jj++) {
     f5e:	9f 5f       	subi	r25, 0xFF	; 255
     f60:	2c 5f       	subi	r18, 0xFC	; 252
     f62:	3f 4f       	sbci	r19, 0xFF	; 255
     f64:	9f 15       	cp	r25, r15
     f66:	08 f3       	brcs	.-62     	; 0xf2a <CoFactor+0xb8>
     f68:	6d 85       	ldd	r22, Y+13	; 0x0d
     f6a:	7e 85       	ldd	r23, Y+14	; 0x0e
						continue;
					}
					c[i1][j1] = a[ii][jj];
					j1++;
				}
				i1++;
     f6c:	5f 5f       	subi	r21, 0xFF	; 255

	for (j = 0; j < n; j++) {
		for (i = 0; i < n; i++) {
			//Form the adjoint a_ij
			i1 = 0;
			for (ii = 0; ii < n; ii++) {
     f6e:	8f 5f       	subi	r24, 0xFF	; 255
     f70:	6e 5f       	subi	r22, 0xFE	; 254
     f72:	7f 4f       	sbci	r23, 0xFF	; 255
     f74:	8f 15       	cp	r24, r15
     f76:	48 f2       	brcs	.-110    	; 0xf0a <CoFactor+0x98>
				}
				i1++;
			}

			//Calculate the determinate
			det = Determinant(c, n - 1);
     f78:	6f 81       	ldd	r22, Y+7	; 0x07
     f7a:	c3 01       	movw	r24, r6
     f7c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <Determinant>
     f80:	2b 81       	ldd	r18, Y+3	; 0x03
     f82:	3c 81       	ldd	r19, Y+4	; 0x04
     f84:	22 0d       	add	r18, r2
     f86:	33 1d       	adc	r19, r3

			//Fill in the elements of the cofactor
			if((i + j) % 2){
     f88:	20 ff       	sbrs	r18, 0
     f8a:	10 c0       	rjmp	.+32     	; 0xfac <CoFactor+0x13a>
				b[i][j] = -det;
     f8c:	a9 81       	ldd	r26, Y+1	; 0x01
     f8e:	ba 81       	ldd	r27, Y+2	; 0x02
     f90:	ed 91       	ld	r30, X+
     f92:	fc 91       	ld	r31, X
     f94:	2d 81       	ldd	r18, Y+5	; 0x05
     f96:	3e 81       	ldd	r19, Y+6	; 0x06
     f98:	e2 0f       	add	r30, r18
     f9a:	f3 1f       	adc	r31, r19
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	b0 58       	subi	r27, 0x80	; 128
     fa2:	80 83       	st	Z, r24
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	a2 83       	std	Z+2, r26	; 0x02
     fa8:	b3 83       	std	Z+3, r27	; 0x03
     faa:	0c c0       	rjmp	.+24     	; 0xfc4 <CoFactor+0x152>
			}
			else{
				b[i][j] = det;
     fac:	a9 81       	ldd	r26, Y+1	; 0x01
     fae:	ba 81       	ldd	r27, Y+2	; 0x02
     fb0:	ed 91       	ld	r30, X+
     fb2:	fc 91       	ld	r31, X
     fb4:	2d 81       	ldd	r18, Y+5	; 0x05
     fb6:	3e 81       	ldd	r19, Y+6	; 0x06
     fb8:	e2 0f       	add	r30, r18
     fba:	f3 1f       	adc	r31, r19
     fbc:	60 83       	st	Z, r22
     fbe:	71 83       	std	Z+1, r23	; 0x01
     fc0:	82 83       	std	Z+2, r24	; 0x02
     fc2:	93 83       	std	Z+3, r25	; 0x03
	for (i = 0; i<n - 1; i++){
		c[i] = (double*) malloc((n-1) * sizeof(double));
	}

	for (j = 0; j < n; j++) {
		for (i = 0; i < n; i++) {
     fc4:	1f 5f       	subi	r17, 0xFF	; 255
     fc6:	3f ef       	ldi	r19, 0xFF	; 255
     fc8:	23 1a       	sub	r2, r19
     fca:	33 0a       	sbc	r3, r19
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
     fd0:	02 96       	adiw	r24, 0x02	; 2
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	1f 15       	cp	r17, r15
     fd8:	28 f4       	brcc	.+10     	; 0xfe4 <CoFactor+0x172>
     fda:	68 85       	ldd	r22, Y+8	; 0x08
     fdc:	7d 2d       	mov	r23, r13
	double det;
	double **c;

	c = (double**) malloc((n-1) * sizeof(double*));
	for (i = 0; i<n - 1; i++){
		c[i] = (double*) malloc((n-1) * sizeof(double));
     fde:	50 2f       	mov	r21, r16
     fe0:	80 2f       	mov	r24, r16
     fe2:	93 cf       	rjmp	.-218    	; 0xf0a <CoFactor+0x98>
	}

	for (j = 0; j < n; j++) {
     fe4:	e3 94       	inc	r14
     fe6:	ab 81       	ldd	r26, Y+3	; 0x03
     fe8:	bc 81       	ldd	r27, Y+4	; 0x04
     fea:	11 96       	adiw	r26, 0x01	; 1
     fec:	bc 83       	std	Y+4, r27	; 0x04
     fee:	ab 83       	std	Y+3, r26	; 0x03
     ff0:	ed 81       	ldd	r30, Y+5	; 0x05
     ff2:	fe 81       	ldd	r31, Y+6	; 0x06
     ff4:	34 96       	adiw	r30, 0x04	; 4
     ff6:	fe 83       	std	Y+6, r31	; 0x06
     ff8:	ed 83       	std	Y+5, r30	; 0x05
     ffa:	ef 14       	cp	r14, r15
     ffc:	98 f0       	brcs	.+38     	; 0x1024 <CoFactor+0x1b2>
     ffe:	1a c0       	rjmp	.+52     	; 0x1034 <CoFactor+0x1c2>
				j1 = 0;
				for (jj = 0; jj < n; jj++) {
					if (jj == j){
						continue;
					}
					c[i1][j1] = a[ii][jj];
    1000:	21 2c       	mov	r2, r1
    1002:	31 2c       	mov	r3, r1
    1004:	1c 82       	std	Y+4, r1	; 0x04
    1006:	1b 82       	std	Y+3, r1	; 0x03
    1008:	e1 2c       	mov	r14, r1
    100a:	cb 86       	std	Y+11, r12	; 0x0b
    100c:	dc 86       	std	Y+12, r13	; 0x0c
    100e:	00 e0       	ldi	r16, 0x00	; 0
    1010:	a8 86       	std	Y+8, r10	; 0x08
    1012:	db 2c       	mov	r13, r11
    1014:	51 2c       	mov	r5, r1
    1016:	41 2c       	mov	r4, r1
    1018:	c0 2e       	mov	r12, r16
				}
				i1++;
			}

			//Calculate the determinate
			det = Determinant(c, n - 1);
    101a:	ff ef       	ldi	r31, 0xFF	; 255
    101c:	ff 0d       	add	r31, r15
    101e:	ff 83       	std	Y+7, r31	; 0x07
    1020:	3e 82       	std	Y+6, r3	; 0x06
    1022:	2d 82       	std	Y+5, r2	; 0x05
    1024:	2b 85       	ldd	r18, Y+11	; 0x0b
    1026:	29 83       	std	Y+1, r18	; 0x01
    1028:	3c 85       	ldd	r19, Y+12	; 0x0c
    102a:	3a 83       	std	Y+2, r19	; 0x02
				j1 = 0;
				for (jj = 0; jj < n; jj++) {
					if (jj == j){
						continue;
					}
					c[i1][j1] = a[ii][jj];
    102c:	21 2c       	mov	r2, r1
    102e:	31 2c       	mov	r3, r1
    1030:	10 e0       	ldi	r17, 0x00	; 0
    1032:	d3 cf       	rjmp	.-90     	; 0xfda <CoFactor+0x168>
			else{
				b[i][j] = det;
			}
		}
	}
	for (i = 0; i<n - 1; i++){
    1034:	89 85       	ldd	r24, Y+9	; 0x09
    1036:	9a 85       	ldd	r25, Y+10	; 0x0a
    1038:	18 16       	cp	r1, r24
    103a:	19 06       	cpc	r1, r25
    103c:	9c f4       	brge	.+38     	; 0x1064 <CoFactor+0x1f2>
				j1 = 0;
				for (jj = 0; jj < n; jj++) {
					if (jj == j){
						continue;
					}
					c[i1][j1] = a[ii][jj];
    103e:	10 e0       	ldi	r17, 0x00	; 0
				b[i][j] = det;
			}
		}
	}
	for (i = 0; i<n - 1; i++){
		free(c[i]);
    1040:	e1 2f       	mov	r30, r17
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	e6 0d       	add	r30, r6
    104a:	f7 1d       	adc	r31, r7
    104c:	80 81       	ld	r24, Z
    104e:	91 81       	ldd	r25, Z+1	; 0x01
    1050:	0e 94 82 0c 	call	0x1904	; 0x1904 <free>
			else{
				b[i][j] = det;
			}
		}
	}
	for (i = 0; i<n - 1; i++){
    1054:	1f 5f       	subi	r17, 0xFF	; 255
    1056:	81 2f       	mov	r24, r17
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	a9 85       	ldd	r26, Y+9	; 0x09
    105c:	ba 85       	ldd	r27, Y+10	; 0x0a
    105e:	8a 17       	cp	r24, r26
    1060:	9b 07       	cpc	r25, r27
    1062:	74 f3       	brlt	.-36     	; 0x1040 <CoFactor+0x1ce>
		free(c[i]);
	}
	free(c);
    1064:	c3 01       	movw	r24, r6
    1066:	0e 94 82 0c 	call	0x1904	; 0x1904 <free>
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <CoFactor+0x206>
	c = (double**) malloc((n-1) * sizeof(double*));
	for (i = 0; i<n - 1; i++){
		c[i] = (double*) malloc((n-1) * sizeof(double));
	}

	for (j = 0; j < n; j++) {
    106c:	f1 10       	cpse	r15, r1
    106e:	c8 cf       	rjmp	.-112    	; 0x1000 <CoFactor+0x18e>
    1070:	f9 cf       	rjmp	.-14     	; 0x1064 <CoFactor+0x1f2>
    1072:	f1 10       	cpse	r15, r1
    1074:	c5 cf       	rjmp	.-118    	; 0x1000 <CoFactor+0x18e>
    1076:	e3 cf       	rjmp	.-58     	; 0x103e <CoFactor+0x1cc>
	}
	for (i = 0; i<n - 1; i++){
		free(c[i]);
	}
	free(c);
}
    1078:	60 96       	adiw	r28, 0x10	; 16
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	df 90       	pop	r13
    1092:	cf 90       	pop	r12
    1094:	bf 90       	pop	r11
    1096:	af 90       	pop	r10
    1098:	9f 90       	pop	r9
    109a:	8f 90       	pop	r8
    109c:	7f 90       	pop	r7
    109e:	6f 90       	pop	r6
    10a0:	5f 90       	pop	r5
    10a2:	4f 90       	pop	r4
    10a4:	3f 90       	pop	r3
    10a6:	2f 90       	pop	r2
    10a8:	08 95       	ret

000010aa <TSquare>:


//Transpose of a square matrix, in place
void TSquare(double **a, uint8_t n){
    10aa:	2f 92       	push	r2
    10ac:	3f 92       	push	r3
    10ae:	4f 92       	push	r4
    10b0:	5f 92       	push	r5
    10b2:	6f 92       	push	r6
    10b4:	7f 92       	push	r7
    10b6:	8f 92       	push	r8
    10b8:	9f 92       	push	r9
    10ba:	af 92       	push	r10
    10bc:	bf 92       	push	r11
    10be:	cf 92       	push	r12
    10c0:	df 92       	push	r13
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <TSquare+0x26>
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <TSquare+0x28>
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	6c 01       	movw	r12, r24
	uint8_t i, j;
	double tmp;

	for (i = 1; i < n; i++) {
    10d8:	62 30       	cpi	r22, 0x02	; 2
    10da:	a0 f5       	brcc	.+104    	; 0x1144 <TSquare+0x9a>
    10dc:	51 c0       	rjmp	.+162    	; 0x1180 <TSquare+0xd6>
		for (j = 0; j < i; j++) {
			tmp = a[i][j];
    10de:	a9 81       	ldd	r26, Y+1	; 0x01
    10e0:	ba 81       	ldd	r27, Y+2	; 0x02
    10e2:	4d 91       	ld	r20, X+
    10e4:	5c 91       	ld	r21, X
    10e6:	fa 01       	movw	r30, r20
    10e8:	e2 0f       	add	r30, r18
    10ea:	f3 1f       	adc	r31, r19
    10ec:	40 81       	ld	r20, Z
    10ee:	51 81       	ldd	r21, Z+1	; 0x01
    10f0:	62 81       	ldd	r22, Z+2	; 0x02
    10f2:	73 81       	ldd	r23, Z+3	; 0x03
    10f4:	cb 80       	ldd	r12, Y+3	; 0x03
    10f6:	dc 80       	ldd	r13, Y+4	; 0x04
			a[i][j] = a[j][i];
    10f8:	d6 01       	movw	r26, r12
    10fa:	ed 90       	ld	r14, X+
    10fc:	fd 90       	ld	r15, X+
    10fe:	bc 83       	std	Y+4, r27	; 0x04
    1100:	ab 83       	std	Y+3, r26	; 0x03
    1102:	e0 0e       	add	r14, r16
    1104:	f1 1e       	adc	r15, r17
    1106:	d7 01       	movw	r26, r14
    1108:	4d 90       	ld	r4, X+
    110a:	5d 90       	ld	r5, X+
    110c:	6d 90       	ld	r6, X+
    110e:	7c 90       	ld	r7, X
    1110:	40 82       	st	Z, r4
    1112:	51 82       	std	Z+1, r5	; 0x01
    1114:	62 82       	std	Z+2, r6	; 0x02
    1116:	73 82       	std	Z+3, r7	; 0x03
			a[j][i] = tmp;
    1118:	d6 01       	movw	r26, r12
    111a:	ed 91       	ld	r30, X+
    111c:	fc 91       	ld	r31, X
    111e:	e0 0f       	add	r30, r16
    1120:	f1 1f       	adc	r31, r17
    1122:	40 83       	st	Z, r20
    1124:	51 83       	std	Z+1, r21	; 0x01
    1126:	62 83       	std	Z+2, r22	; 0x02
    1128:	73 83       	std	Z+3, r23	; 0x03
void TSquare(double **a, uint8_t n){
	uint8_t i, j;
	double tmp;

	for (i = 1; i < n; i++) {
		for (j = 0; j < i; j++) {
    112a:	9f 5f       	subi	r25, 0xFF	; 255
    112c:	2c 5f       	subi	r18, 0xFC	; 252
    112e:	3f 4f       	sbci	r19, 0xFF	; 255
    1130:	89 13       	cpse	r24, r25
    1132:	d5 cf       	rjmp	.-86     	; 0x10de <TSquare+0x34>
    1134:	7b 2d       	mov	r23, r11
    1136:	64 01       	movw	r12, r8
    1138:	6a 2d       	mov	r22, r10
//Transpose of a square matrix, in place
void TSquare(double **a, uint8_t n){
	uint8_t i, j;
	double tmp;

	for (i = 1; i < n; i++) {
    113a:	ba 14       	cp	r11, r10
    113c:	08 f5       	brcc	.+66     	; 0x1180 <TSquare+0xd6>
    113e:	8f 5f       	subi	r24, 0xFF	; 255
    1140:	7f 5f       	subi	r23, 0xFF	; 255
    1142:	04 c0       	rjmp	.+8      	; 0x114c <TSquare+0xa2>
    1144:	72 e0       	ldi	r23, 0x02	; 2
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	3c 2c       	mov	r3, r12
    114a:	2d 2c       	mov	r2, r13
		for (j = 0; j < i; j++) {
    114c:	88 23       	and	r24, r24
    114e:	b9 f3       	breq	.-18     	; 0x113e <TSquare+0x94>
			tmp = a[i][j];
    1150:	08 2f       	mov	r16, r24
    1152:	10 e0       	ldi	r17, 0x00	; 0
    1154:	78 01       	movw	r14, r16
    1156:	ee 0c       	add	r14, r14
    1158:	ff 1c       	adc	r15, r15
    115a:	ec 0c       	add	r14, r12
    115c:	fd 1c       	adc	r15, r13
			a[i][j] = a[j][i];
    115e:	00 0f       	add	r16, r16
    1160:	11 1f       	adc	r17, r17
    1162:	00 0f       	add	r16, r16
    1164:	11 1f       	adc	r17, r17
    1166:	43 2d       	mov	r20, r3
    1168:	52 2d       	mov	r21, r2
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	fa 82       	std	Y+2, r15	; 0x02
    1172:	e9 82       	std	Y+1, r14	; 0x01
    1174:	5c 83       	std	Y+4, r21	; 0x04
    1176:	4b 83       	std	Y+3, r20	; 0x03
    1178:	b7 2e       	mov	r11, r23
    117a:	46 01       	movw	r8, r12
    117c:	a6 2e       	mov	r10, r22
    117e:	af cf       	rjmp	.-162    	; 0x10de <TSquare+0x34>
			a[j][i] = tmp;
		}
	}
}
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	df 90       	pop	r13
    1196:	cf 90       	pop	r12
    1198:	bf 90       	pop	r11
    119a:	af 90       	pop	r10
    119c:	9f 90       	pop	r9
    119e:	8f 90       	pop	r8
    11a0:	7f 90       	pop	r7
    11a2:	6f 90       	pop	r6
    11a4:	5f 90       	pop	r5
    11a6:	4f 90       	pop	r4
    11a8:	3f 90       	pop	r3
    11aa:	2f 90       	pop	r2
    11ac:	08 95       	ret

000011ae <I>:
	}

	return m;
}

Matrix I(Matrix* m){
    11ae:	ef 92       	push	r14
    11b0:	ff 92       	push	r15
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <I+0xe>
    11bc:	00 d0       	rcall	.+0      	; 0x11be <I+0x10>
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	8c 01       	movw	r16, r24
	Matrix temp;
	if (m->col == 1 && m->row == 1){ //Scalar
    11c4:	dc 01       	movw	r26, r24
    11c6:	11 96       	adiw	r26, 0x01	; 1
    11c8:	6c 91       	ld	r22, X
    11ca:	11 97       	sbiw	r26, 0x01	; 1
    11cc:	61 30       	cpi	r22, 0x01	; 1
    11ce:	29 f5       	brne	.+74     	; 0x121a <I+0x6c>
    11d0:	8c 91       	ld	r24, X
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <I+0x2a>
    11d6:	49 c0       	rjmp	.+146    	; 0x126a <I+0xbc>
		mallocMatrix(&temp, 1, 1);
    11d8:	41 e0       	ldi	r20, 0x01	; 1
    11da:	ce 01       	movw	r24, r28
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	0e 94 ac 02 	call	0x558	; 0x558 <mallocMatrix>
		temp.data[0][0] = 1.0 / m->data[0][0];
    11e2:	eb 81       	ldd	r30, Y+3	; 0x03
    11e4:	fc 81       	ldd	r31, Y+4	; 0x04
    11e6:	e0 80       	ld	r14, Z
    11e8:	f1 80       	ldd	r15, Z+1	; 0x01
    11ea:	d8 01       	movw	r26, r16
    11ec:	12 96       	adiw	r26, 0x02	; 2
    11ee:	ed 91       	ld	r30, X+
    11f0:	fc 91       	ld	r31, X
    11f2:	13 97       	sbiw	r26, 0x03	; 3
    11f4:	01 90       	ld	r0, Z+
    11f6:	f0 81       	ld	r31, Z
    11f8:	e0 2d       	mov	r30, r0
    11fa:	20 81       	ld	r18, Z
    11fc:	31 81       	ldd	r19, Z+1	; 0x01
    11fe:	42 81       	ldd	r20, Z+2	; 0x02
    1200:	53 81       	ldd	r21, Z+3	; 0x03
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	80 e8       	ldi	r24, 0x80	; 128
    1208:	9f e3       	ldi	r25, 0x3F	; 63
    120a:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divsf3>
    120e:	f7 01       	movw	r30, r14
    1210:	60 83       	st	Z, r22
    1212:	71 83       	std	Z+1, r23	; 0x01
    1214:	82 83       	std	Z+2, r24	; 0x02
    1216:	93 83       	std	Z+3, r25	; 0x03
    1218:	2e c0       	rjmp	.+92     	; 0x1276 <I+0xc8>
	}
	else if (m->row == m->col){ //any NxN matrix
    121a:	dc 01       	movw	r26, r24
    121c:	8c 91       	ld	r24, X
    121e:	68 13       	cpse	r22, r24
    1220:	24 c0       	rjmp	.+72     	; 0x126a <I+0xbc>
		mallocMatrix(&temp, m->row, m->col);
    1222:	46 2f       	mov	r20, r22
    1224:	ce 01       	movw	r24, r28
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	0e 94 ac 02 	call	0x558	; 0x558 <mallocMatrix>
		CoFactor(m->data, m->row, temp.data);
    122c:	4b 81       	ldd	r20, Y+3	; 0x03
    122e:	5c 81       	ldd	r21, Y+4	; 0x04
    1230:	f8 01       	movw	r30, r16
    1232:	60 81       	ld	r22, Z
    1234:	82 81       	ldd	r24, Z+2	; 0x02
    1236:	93 81       	ldd	r25, Z+3	; 0x03
    1238:	0e 94 39 07 	call	0xe72	; 0xe72 <CoFactor>
		TSquare(temp.data, temp.row);
    123c:	69 81       	ldd	r22, Y+1	; 0x01
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	0e 94 55 08 	call	0x10aa	; 0x10aa <TSquare>
		scale(&temp, 1.0/det(m));
    1246:	c8 01       	movw	r24, r16
    1248:	0e 94 2b 07 	call	0xe56	; 0xe56 <det>
    124c:	9b 01       	movw	r18, r22
    124e:	ac 01       	movw	r20, r24
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	80 e8       	ldi	r24, 0x80	; 128
    1256:	9f e3       	ldi	r25, 0x3F	; 63
    1258:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divsf3>
    125c:	ab 01       	movw	r20, r22
    125e:	bc 01       	movw	r22, r24
    1260:	ce 01       	movw	r24, r28
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	0e 94 60 05 	call	0xac0	; 0xac0 <scale>
    1268:	06 c0       	rjmp	.+12     	; 0x1276 <I+0xc8>
	}
	else{ //Not square matrix
		mallocMatrix(&temp, 0, 0);
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	ce 01       	movw	r24, r28
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	0e 94 ac 02 	call	0x558	; 0x558 <mallocMatrix>
	}
	return temp;
    1276:	69 81       	ldd	r22, Y+1	; 0x01
    1278:	7a 81       	ldd	r23, Y+2	; 0x02
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	08 95       	ret

00001294 <Ie>:

Matrix* Ie(Matrix* m){
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	00 d0       	rcall	.+0      	; 0x129e <Ie+0xa>
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <Ie+0xc>
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	8c 01       	movw	r16, r24
	Matrix temp = *m;
    12a6:	fc 01       	movw	r30, r24
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	a2 81       	ldd	r26, Z+2	; 0x02
    12ae:	b3 81       	ldd	r27, Z+3	; 0x03
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	9a 83       	std	Y+2, r25	; 0x02
    12b4:	ab 83       	std	Y+3, r26	; 0x03
    12b6:	bc 83       	std	Y+4, r27	; 0x04
	*m = I(&temp);
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	0e 94 d7 08 	call	0x11ae	; 0x11ae <I>
    12c0:	f8 01       	movw	r30, r16
    12c2:	60 83       	st	Z, r22
    12c4:	71 83       	std	Z+1, r23	; 0x01
    12c6:	82 83       	std	Z+2, r24	; 0x02
    12c8:	93 83       	std	Z+3, r25	; 0x03
	freeMatrix(&temp);
    12ca:	ce 01       	movw	r24, r28
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <freeMatrix>
	return m;
}
    12d2:	c8 01       	movw	r24, r16
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	08 95       	ret

000012e6 <TAny>:
		}
	}
}

//Transpose of a none square matrix
void TAny(double ***matrix, uint8_t row, uint8_t col){
    12e6:	2f 92       	push	r2
    12e8:	3f 92       	push	r3
    12ea:	4f 92       	push	r4
    12ec:	5f 92       	push	r5
    12ee:	6f 92       	push	r6
    12f0:	7f 92       	push	r7
    12f2:	8f 92       	push	r8
    12f4:	9f 92       	push	r9
    12f6:	af 92       	push	r10
    12f8:	bf 92       	push	r11
    12fa:	cf 92       	push	r12
    12fc:	df 92       	push	r13
    12fe:	ef 92       	push	r14
    1300:	ff 92       	push	r15
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	ec 01       	movw	r28, r24
    130c:	a6 2e       	mov	r10, r22
    130e:	b4 2e       	mov	r11, r20
	// dynamically allocate an array
	double **result;
	result = (double**) malloc(col * sizeof(double*)); //creates a new array of pointers to int objects
    1310:	84 2f       	mov	r24, r20
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0e 94 ed 0b 	call	0x17da	; 0x17da <malloc>
    131c:	4c 01       	movw	r8, r24
	for (uint8_t i = 0; i < col; i++){
    131e:	bb 20       	and	r11, r11
    1320:	e1 f0       	breq	.+56     	; 0x135a <TAny+0x74>
		result[i] = (double*) malloc(row * sizeof(double));
    1322:	ca 2c       	mov	r12, r10
    1324:	d1 2c       	mov	r13, r1
    1326:	cc 0c       	add	r12, r12
    1328:	dd 1c       	adc	r13, r13
    132a:	cc 0c       	add	r12, r12
    132c:	dd 1c       	adc	r13, r13
    132e:	8c 01       	movw	r16, r24
    1330:	ee 24       	eor	r14, r14
    1332:	ea 94       	dec	r14
    1334:	eb 0c       	add	r14, r11
    1336:	f1 2c       	mov	r15, r1
    1338:	8f ef       	ldi	r24, 0xFF	; 255
    133a:	e8 1a       	sub	r14, r24
    133c:	f8 0a       	sbc	r15, r24
    133e:	ee 0c       	add	r14, r14
    1340:	ff 1c       	adc	r15, r15
    1342:	e8 0c       	add	r14, r8
    1344:	f9 1c       	adc	r15, r9
    1346:	c6 01       	movw	r24, r12
    1348:	0e 94 ed 0b 	call	0x17da	; 0x17da <malloc>
    134c:	f8 01       	movw	r30, r16
    134e:	81 93       	st	Z+, r24
    1350:	91 93       	st	Z+, r25
    1352:	8f 01       	movw	r16, r30
//Transpose of a none square matrix
void TAny(double ***matrix, uint8_t row, uint8_t col){
	// dynamically allocate an array
	double **result;
	result = (double**) malloc(col * sizeof(double*)); //creates a new array of pointers to int objects
	for (uint8_t i = 0; i < col; i++){
    1354:	ee 15       	cp	r30, r14
    1356:	ff 05       	cpc	r31, r15
    1358:	b1 f7       	brne	.-20     	; 0x1346 <TAny+0x60>
		result[i] = (double*) malloc(row * sizeof(double));
	}

	// transposing
	for (uint8_t i = 0; i < row; i++){
    135a:	aa 20       	and	r10, r10
    135c:	09 f4       	brne	.+2      	; 0x1360 <TAny+0x7a>
    135e:	56 c0       	rjmp	.+172    	; 0x140c <TAny+0x126>
    1360:	aa 94       	dec	r10
    1362:	ca 2c       	mov	r12, r10
    1364:	d1 2c       	mov	r13, r1
    1366:	ff ef       	ldi	r31, 0xFF	; 255
    1368:	cf 1a       	sub	r12, r31
    136a:	df 0a       	sbc	r13, r31
    136c:	cc 0c       	add	r12, r12
    136e:	dd 1c       	adc	r13, r13
    1370:	ee 24       	eor	r14, r14
    1372:	ea 94       	dec	r14
    1374:	eb 0c       	add	r14, r11
    1376:	f1 2c       	mov	r15, r1
    1378:	8f ef       	ldi	r24, 0xFF	; 255
    137a:	e8 1a       	sub	r14, r24
    137c:	f8 0a       	sbc	r15, r24
    137e:	ee 0c       	add	r14, r14
    1380:	ff 1c       	adc	r15, r15
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a8 2c       	mov	r10, r8
    1388:	39 2c       	mov	r3, r9
		for (uint8_t j = 0; j < col; j++){
			result[j][i] = matrix[0][i][j];
    138a:	21 2c       	mov	r2, r1
    138c:	22 c0       	rjmp	.+68     	; 0x13d2 <TAny+0xec>
    138e:	4d 91       	ld	r20, X+
    1390:	5d 91       	ld	r21, X+
    1392:	e8 81       	ld	r30, Y
    1394:	f9 81       	ldd	r31, Y+1	; 0x01
    1396:	e8 0f       	add	r30, r24
    1398:	f9 1f       	adc	r31, r25
    139a:	b9 01       	movw	r22, r18
    139c:	66 0f       	add	r22, r22
    139e:	77 1f       	adc	r23, r23
    13a0:	01 90       	ld	r0, Z+
    13a2:	f0 81       	ld	r31, Z
    13a4:	e0 2d       	mov	r30, r0
    13a6:	e6 0f       	add	r30, r22
    13a8:	f7 1f       	adc	r31, r23
    13aa:	40 80       	ld	r4, Z
    13ac:	51 80       	ldd	r5, Z+1	; 0x01
    13ae:	62 80       	ldd	r6, Z+2	; 0x02
    13b0:	73 80       	ldd	r7, Z+3	; 0x03
    13b2:	fa 01       	movw	r30, r20
    13b4:	e0 0f       	add	r30, r16
    13b6:	f1 1f       	adc	r31, r17
    13b8:	40 82       	st	Z, r4
    13ba:	51 82       	std	Z+1, r5	; 0x01
    13bc:	62 82       	std	Z+2, r6	; 0x02
    13be:	73 82       	std	Z+3, r7	; 0x03
    13c0:	2e 5f       	subi	r18, 0xFE	; 254
    13c2:	3f 4f       	sbci	r19, 0xFF	; 255
		result[i] = (double*) malloc(row * sizeof(double));
	}

	// transposing
	for (uint8_t i = 0; i < row; i++){
		for (uint8_t j = 0; j < col; j++){
    13c4:	2e 15       	cp	r18, r14
    13c6:	3f 05       	cpc	r19, r15
    13c8:	11 f7       	brne	.-60     	; 0x138e <TAny+0xa8>
    13ca:	02 96       	adiw	r24, 0x02	; 2
	for (uint8_t i = 0; i < col; i++){
		result[i] = (double*) malloc(row * sizeof(double));
	}

	// transposing
	for (uint8_t i = 0; i < row; i++){
    13cc:	8c 15       	cp	r24, r12
    13ce:	9d 05       	cpc	r25, r13
    13d0:	a9 f0       	breq	.+42     	; 0x13fc <TAny+0x116>
		for (uint8_t j = 0; j < col; j++){
    13d2:	bb 20       	and	r11, r11
    13d4:	d1 f3       	breq	.-12     	; 0x13ca <TAny+0xe4>
			result[j][i] = matrix[0][i][j];
    13d6:	8c 01       	movw	r16, r24
    13d8:	00 0f       	add	r16, r16
    13da:	11 1f       	adc	r17, r17
    13dc:	aa 2d       	mov	r26, r10
    13de:	b3 2d       	mov	r27, r3
    13e0:	22 2d       	mov	r18, r2
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	d4 cf       	rjmp	.-88     	; 0x138e <TAny+0xa8>
	*matrix = result;


	// clean up
	for (uint8_t i = 0; i < row; i++){
		free(temp[i]);
    13e6:	89 91       	ld	r24, Y+
    13e8:	99 91       	ld	r25, Y+
    13ea:	0e 94 82 0c 	call	0x1904	; 0x1904 <free>
	double** temp = *matrix;
	*matrix = result;


	// clean up
	for (uint8_t i = 0; i < row; i++){
    13ee:	cc 15       	cp	r28, r12
    13f0:	dd 05       	cpc	r29, r13
    13f2:	c9 f7       	brne	.-14     	; 0x13e6 <TAny+0x100>
		free(temp[i]);
	}
	free(temp);
    13f4:	c8 01       	movw	r24, r16
    13f6:	0e 94 82 0c 	call	0x1904	; 0x1904 <free>
    13fa:	0d c0       	rjmp	.+26     	; 0x1416 <TAny+0x130>
			result[j][i] = matrix[0][i][j];
		}
	}

	// swap pointers
	double** temp = *matrix;
    13fc:	08 81       	ld	r16, Y
    13fe:	19 81       	ldd	r17, Y+1	; 0x01
	*matrix = result;
    1400:	99 82       	std	Y+1, r9	; 0x01
    1402:	88 82       	st	Y, r8
    1404:	e8 01       	movw	r28, r16
    1406:	c0 0e       	add	r12, r16
    1408:	d1 1e       	adc	r13, r17
    140a:	ed cf       	rjmp	.-38     	; 0x13e6 <TAny+0x100>
			result[j][i] = matrix[0][i][j];
		}
	}

	// swap pointers
	double** temp = *matrix;
    140c:	08 81       	ld	r16, Y
    140e:	19 81       	ldd	r17, Y+1	; 0x01
	*matrix = result;
    1410:	99 82       	std	Y+1, r9	; 0x01
    1412:	88 82       	st	Y, r8
    1414:	ef cf       	rjmp	.-34     	; 0x13f4 <TAny+0x10e>
	// clean up
	for (uint8_t i = 0; i < row; i++){
		free(temp[i]);
	}
	free(temp);
}
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	ff 90       	pop	r15
    1420:	ef 90       	pop	r14
    1422:	df 90       	pop	r13
    1424:	cf 90       	pop	r12
    1426:	bf 90       	pop	r11
    1428:	af 90       	pop	r10
    142a:	9f 90       	pop	r9
    142c:	8f 90       	pop	r8
    142e:	7f 90       	pop	r7
    1430:	6f 90       	pop	r6
    1432:	5f 90       	pop	r5
    1434:	4f 90       	pop	r4
    1436:	3f 90       	pop	r3
    1438:	2f 90       	pop	r2
    143a:	08 95       	ret

0000143c <Te>:
	temp = copy(m);
	Te(&temp);
	return temp;
}

Matrix* Te(Matrix* m){
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	ec 01       	movw	r28, r24
	if (m->row == m->col){ //Square
    1442:	68 81       	ld	r22, Y
    1444:	49 81       	ldd	r20, Y+1	; 0x01
    1446:	64 13       	cpse	r22, r20
    1448:	05 c0       	rjmp	.+10     	; 0x1454 <Te+0x18>
		TSquare(m->data, m->row);
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	9b 81       	ldd	r25, Y+3	; 0x03
    144e:	0e 94 55 08 	call	0x10aa	; 0x10aa <TSquare>
    1452:	07 c0       	rjmp	.+14     	; 0x1462 <Te+0x26>
	}

	else{ //Not square
		TAny(&m->data, m->row, m->col);
    1454:	02 96       	adiw	r24, 0x02	; 2
    1456:	0e 94 73 09 	call	0x12e6	; 0x12e6 <TAny>
		//Swap column and row size;
		uint8_t temp = m->row;
    145a:	88 81       	ld	r24, Y
		m->row = m->col;
    145c:	99 81       	ldd	r25, Y+1	; 0x01
    145e:	98 83       	st	Y, r25
		m->col = temp;
    1460:	89 83       	std	Y+1, r24	; 0x01
	}

	return m;
}
    1462:	ce 01       	movw	r24, r28
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	08 95       	ret

0000146a <T>:
		return Determinant(m->data, m->row);
	}
	return 0;
}

Matrix T(Matrix* m){
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	00 d0       	rcall	.+0      	; 0x1470 <T+0x6>
    1470:	00 d0       	rcall	.+0      	; 0x1472 <T+0x8>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
	Matrix temp;
	temp = copy(m);
    1476:	0e 94 0b 03 	call	0x616	; 0x616 <copy>
    147a:	69 83       	std	Y+1, r22	; 0x01
    147c:	7a 83       	std	Y+2, r23	; 0x02
    147e:	8b 83       	std	Y+3, r24	; 0x03
    1480:	9c 83       	std	Y+4, r25	; 0x04
	Te(&temp);
    1482:	ce 01       	movw	r24, r28
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	0e 94 1e 0a 	call	0x143c	; 0x143c <Te>
	return temp;
    148a:	69 81       	ldd	r22, Y+1	; 0x01
    148c:	7a 81       	ldd	r23, Y+2	; 0x02
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	08 95       	ret

000014a0 <__subsf3>:
    14a0:	50 58       	subi	r21, 0x80	; 128

000014a2 <__addsf3>:
    14a2:	bb 27       	eor	r27, r27
    14a4:	aa 27       	eor	r26, r26
    14a6:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__addsf3x>
    14aa:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__fp_round>
    14ae:	0e 94 38 0b 	call	0x1670	; 0x1670 <__fp_pscA>
    14b2:	38 f0       	brcs	.+14     	; 0x14c2 <__addsf3+0x20>
    14b4:	0e 94 3f 0b 	call	0x167e	; 0x167e <__fp_pscB>
    14b8:	20 f0       	brcs	.+8      	; 0x14c2 <__addsf3+0x20>
    14ba:	39 f4       	brne	.+14     	; 0x14ca <__addsf3+0x28>
    14bc:	9f 3f       	cpi	r25, 0xFF	; 255
    14be:	19 f4       	brne	.+6      	; 0x14c6 <__addsf3+0x24>
    14c0:	26 f4       	brtc	.+8      	; 0x14ca <__addsf3+0x28>
    14c2:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__fp_nan>
    14c6:	0e f4       	brtc	.+2      	; 0x14ca <__addsf3+0x28>
    14c8:	e0 95       	com	r30
    14ca:	e7 fb       	bst	r30, 7
    14cc:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__fp_inf>

000014d0 <__addsf3x>:
    14d0:	e9 2f       	mov	r30, r25
    14d2:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__fp_split3>
    14d6:	58 f3       	brcs	.-42     	; 0x14ae <__addsf3+0xc>
    14d8:	ba 17       	cp	r27, r26
    14da:	62 07       	cpc	r22, r18
    14dc:	73 07       	cpc	r23, r19
    14de:	84 07       	cpc	r24, r20
    14e0:	95 07       	cpc	r25, r21
    14e2:	20 f0       	brcs	.+8      	; 0x14ec <__addsf3x+0x1c>
    14e4:	79 f4       	brne	.+30     	; 0x1504 <__addsf3x+0x34>
    14e6:	a6 f5       	brtc	.+104    	; 0x1550 <__addsf3x+0x80>
    14e8:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__fp_zero>
    14ec:	0e f4       	brtc	.+2      	; 0x14f0 <__addsf3x+0x20>
    14ee:	e0 95       	com	r30
    14f0:	0b 2e       	mov	r0, r27
    14f2:	ba 2f       	mov	r27, r26
    14f4:	a0 2d       	mov	r26, r0
    14f6:	0b 01       	movw	r0, r22
    14f8:	b9 01       	movw	r22, r18
    14fa:	90 01       	movw	r18, r0
    14fc:	0c 01       	movw	r0, r24
    14fe:	ca 01       	movw	r24, r20
    1500:	a0 01       	movw	r20, r0
    1502:	11 24       	eor	r1, r1
    1504:	ff 27       	eor	r31, r31
    1506:	59 1b       	sub	r21, r25
    1508:	99 f0       	breq	.+38     	; 0x1530 <__addsf3x+0x60>
    150a:	59 3f       	cpi	r21, 0xF9	; 249
    150c:	50 f4       	brcc	.+20     	; 0x1522 <__addsf3x+0x52>
    150e:	50 3e       	cpi	r21, 0xE0	; 224
    1510:	68 f1       	brcs	.+90     	; 0x156c <__addsf3x+0x9c>
    1512:	1a 16       	cp	r1, r26
    1514:	f0 40       	sbci	r31, 0x00	; 0
    1516:	a2 2f       	mov	r26, r18
    1518:	23 2f       	mov	r18, r19
    151a:	34 2f       	mov	r19, r20
    151c:	44 27       	eor	r20, r20
    151e:	58 5f       	subi	r21, 0xF8	; 248
    1520:	f3 cf       	rjmp	.-26     	; 0x1508 <__addsf3x+0x38>
    1522:	46 95       	lsr	r20
    1524:	37 95       	ror	r19
    1526:	27 95       	ror	r18
    1528:	a7 95       	ror	r26
    152a:	f0 40       	sbci	r31, 0x00	; 0
    152c:	53 95       	inc	r21
    152e:	c9 f7       	brne	.-14     	; 0x1522 <__addsf3x+0x52>
    1530:	7e f4       	brtc	.+30     	; 0x1550 <__addsf3x+0x80>
    1532:	1f 16       	cp	r1, r31
    1534:	ba 0b       	sbc	r27, r26
    1536:	62 0b       	sbc	r22, r18
    1538:	73 0b       	sbc	r23, r19
    153a:	84 0b       	sbc	r24, r20
    153c:	ba f0       	brmi	.+46     	; 0x156c <__addsf3x+0x9c>
    153e:	91 50       	subi	r25, 0x01	; 1
    1540:	a1 f0       	breq	.+40     	; 0x156a <__addsf3x+0x9a>
    1542:	ff 0f       	add	r31, r31
    1544:	bb 1f       	adc	r27, r27
    1546:	66 1f       	adc	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	c2 f7       	brpl	.-16     	; 0x153e <__addsf3x+0x6e>
    154e:	0e c0       	rjmp	.+28     	; 0x156c <__addsf3x+0x9c>
    1550:	ba 0f       	add	r27, r26
    1552:	62 1f       	adc	r22, r18
    1554:	73 1f       	adc	r23, r19
    1556:	84 1f       	adc	r24, r20
    1558:	48 f4       	brcc	.+18     	; 0x156c <__addsf3x+0x9c>
    155a:	87 95       	ror	r24
    155c:	77 95       	ror	r23
    155e:	67 95       	ror	r22
    1560:	b7 95       	ror	r27
    1562:	f7 95       	ror	r31
    1564:	9e 3f       	cpi	r25, 0xFE	; 254
    1566:	08 f0       	brcs	.+2      	; 0x156a <__addsf3x+0x9a>
    1568:	b0 cf       	rjmp	.-160    	; 0x14ca <__addsf3+0x28>
    156a:	93 95       	inc	r25
    156c:	88 0f       	add	r24, r24
    156e:	08 f0       	brcs	.+2      	; 0x1572 <__addsf3x+0xa2>
    1570:	99 27       	eor	r25, r25
    1572:	ee 0f       	add	r30, r30
    1574:	97 95       	ror	r25
    1576:	87 95       	ror	r24
    1578:	08 95       	ret

0000157a <__divsf3>:
    157a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__divsf3x>
    157e:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__fp_round>
    1582:	0e 94 3f 0b 	call	0x167e	; 0x167e <__fp_pscB>
    1586:	58 f0       	brcs	.+22     	; 0x159e <__divsf3+0x24>
    1588:	0e 94 38 0b 	call	0x1670	; 0x1670 <__fp_pscA>
    158c:	40 f0       	brcs	.+16     	; 0x159e <__divsf3+0x24>
    158e:	29 f4       	brne	.+10     	; 0x159a <__divsf3+0x20>
    1590:	5f 3f       	cpi	r21, 0xFF	; 255
    1592:	29 f0       	breq	.+10     	; 0x159e <__divsf3+0x24>
    1594:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__fp_inf>
    1598:	51 11       	cpse	r21, r1
    159a:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__fp_szero>
    159e:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__fp_nan>

000015a2 <__divsf3x>:
    15a2:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__fp_split3>
    15a6:	68 f3       	brcs	.-38     	; 0x1582 <__divsf3+0x8>

000015a8 <__divsf3_pse>:
    15a8:	99 23       	and	r25, r25
    15aa:	b1 f3       	breq	.-20     	; 0x1598 <__divsf3+0x1e>
    15ac:	55 23       	and	r21, r21
    15ae:	91 f3       	breq	.-28     	; 0x1594 <__divsf3+0x1a>
    15b0:	95 1b       	sub	r25, r21
    15b2:	55 0b       	sbc	r21, r21
    15b4:	bb 27       	eor	r27, r27
    15b6:	aa 27       	eor	r26, r26
    15b8:	62 17       	cp	r22, r18
    15ba:	73 07       	cpc	r23, r19
    15bc:	84 07       	cpc	r24, r20
    15be:	38 f0       	brcs	.+14     	; 0x15ce <__divsf3_pse+0x26>
    15c0:	9f 5f       	subi	r25, 0xFF	; 255
    15c2:	5f 4f       	sbci	r21, 0xFF	; 255
    15c4:	22 0f       	add	r18, r18
    15c6:	33 1f       	adc	r19, r19
    15c8:	44 1f       	adc	r20, r20
    15ca:	aa 1f       	adc	r26, r26
    15cc:	a9 f3       	breq	.-22     	; 0x15b8 <__divsf3_pse+0x10>
    15ce:	35 d0       	rcall	.+106    	; 0x163a <__divsf3_pse+0x92>
    15d0:	0e 2e       	mov	r0, r30
    15d2:	3a f0       	brmi	.+14     	; 0x15e2 <__divsf3_pse+0x3a>
    15d4:	e0 e8       	ldi	r30, 0x80	; 128
    15d6:	32 d0       	rcall	.+100    	; 0x163c <__divsf3_pse+0x94>
    15d8:	91 50       	subi	r25, 0x01	; 1
    15da:	50 40       	sbci	r21, 0x00	; 0
    15dc:	e6 95       	lsr	r30
    15de:	00 1c       	adc	r0, r0
    15e0:	ca f7       	brpl	.-14     	; 0x15d4 <__divsf3_pse+0x2c>
    15e2:	2b d0       	rcall	.+86     	; 0x163a <__divsf3_pse+0x92>
    15e4:	fe 2f       	mov	r31, r30
    15e6:	29 d0       	rcall	.+82     	; 0x163a <__divsf3_pse+0x92>
    15e8:	66 0f       	add	r22, r22
    15ea:	77 1f       	adc	r23, r23
    15ec:	88 1f       	adc	r24, r24
    15ee:	bb 1f       	adc	r27, r27
    15f0:	26 17       	cp	r18, r22
    15f2:	37 07       	cpc	r19, r23
    15f4:	48 07       	cpc	r20, r24
    15f6:	ab 07       	cpc	r26, r27
    15f8:	b0 e8       	ldi	r27, 0x80	; 128
    15fa:	09 f0       	breq	.+2      	; 0x15fe <__divsf3_pse+0x56>
    15fc:	bb 0b       	sbc	r27, r27
    15fe:	80 2d       	mov	r24, r0
    1600:	bf 01       	movw	r22, r30
    1602:	ff 27       	eor	r31, r31
    1604:	93 58       	subi	r25, 0x83	; 131
    1606:	5f 4f       	sbci	r21, 0xFF	; 255
    1608:	3a f0       	brmi	.+14     	; 0x1618 <__divsf3_pse+0x70>
    160a:	9e 3f       	cpi	r25, 0xFE	; 254
    160c:	51 05       	cpc	r21, r1
    160e:	78 f0       	brcs	.+30     	; 0x162e <__divsf3_pse+0x86>
    1610:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__fp_inf>
    1614:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__fp_szero>
    1618:	5f 3f       	cpi	r21, 0xFF	; 255
    161a:	e4 f3       	brlt	.-8      	; 0x1614 <__divsf3_pse+0x6c>
    161c:	98 3e       	cpi	r25, 0xE8	; 232
    161e:	d4 f3       	brlt	.-12     	; 0x1614 <__divsf3_pse+0x6c>
    1620:	86 95       	lsr	r24
    1622:	77 95       	ror	r23
    1624:	67 95       	ror	r22
    1626:	b7 95       	ror	r27
    1628:	f7 95       	ror	r31
    162a:	9f 5f       	subi	r25, 0xFF	; 255
    162c:	c9 f7       	brne	.-14     	; 0x1620 <__divsf3_pse+0x78>
    162e:	88 0f       	add	r24, r24
    1630:	91 1d       	adc	r25, r1
    1632:	96 95       	lsr	r25
    1634:	87 95       	ror	r24
    1636:	97 f9       	bld	r25, 7
    1638:	08 95       	ret
    163a:	e1 e0       	ldi	r30, 0x01	; 1
    163c:	66 0f       	add	r22, r22
    163e:	77 1f       	adc	r23, r23
    1640:	88 1f       	adc	r24, r24
    1642:	bb 1f       	adc	r27, r27
    1644:	62 17       	cp	r22, r18
    1646:	73 07       	cpc	r23, r19
    1648:	84 07       	cpc	r24, r20
    164a:	ba 07       	cpc	r27, r26
    164c:	20 f0       	brcs	.+8      	; 0x1656 <__divsf3_pse+0xae>
    164e:	62 1b       	sub	r22, r18
    1650:	73 0b       	sbc	r23, r19
    1652:	84 0b       	sbc	r24, r20
    1654:	ba 0b       	sbc	r27, r26
    1656:	ee 1f       	adc	r30, r30
    1658:	88 f7       	brcc	.-30     	; 0x163c <__divsf3_pse+0x94>
    165a:	e0 95       	com	r30
    165c:	08 95       	ret

0000165e <__fp_inf>:
    165e:	97 f9       	bld	r25, 7
    1660:	9f 67       	ori	r25, 0x7F	; 127
    1662:	80 e8       	ldi	r24, 0x80	; 128
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	60 e0       	ldi	r22, 0x00	; 0
    1668:	08 95       	ret

0000166a <__fp_nan>:
    166a:	9f ef       	ldi	r25, 0xFF	; 255
    166c:	80 ec       	ldi	r24, 0xC0	; 192
    166e:	08 95       	ret

00001670 <__fp_pscA>:
    1670:	00 24       	eor	r0, r0
    1672:	0a 94       	dec	r0
    1674:	16 16       	cp	r1, r22
    1676:	17 06       	cpc	r1, r23
    1678:	18 06       	cpc	r1, r24
    167a:	09 06       	cpc	r0, r25
    167c:	08 95       	ret

0000167e <__fp_pscB>:
    167e:	00 24       	eor	r0, r0
    1680:	0a 94       	dec	r0
    1682:	12 16       	cp	r1, r18
    1684:	13 06       	cpc	r1, r19
    1686:	14 06       	cpc	r1, r20
    1688:	05 06       	cpc	r0, r21
    168a:	08 95       	ret

0000168c <__fp_round>:
    168c:	09 2e       	mov	r0, r25
    168e:	03 94       	inc	r0
    1690:	00 0c       	add	r0, r0
    1692:	11 f4       	brne	.+4      	; 0x1698 <__fp_round+0xc>
    1694:	88 23       	and	r24, r24
    1696:	52 f0       	brmi	.+20     	; 0x16ac <__fp_round+0x20>
    1698:	bb 0f       	add	r27, r27
    169a:	40 f4       	brcc	.+16     	; 0x16ac <__fp_round+0x20>
    169c:	bf 2b       	or	r27, r31
    169e:	11 f4       	brne	.+4      	; 0x16a4 <__fp_round+0x18>
    16a0:	60 ff       	sbrs	r22, 0
    16a2:	04 c0       	rjmp	.+8      	; 0x16ac <__fp_round+0x20>
    16a4:	6f 5f       	subi	r22, 0xFF	; 255
    16a6:	7f 4f       	sbci	r23, 0xFF	; 255
    16a8:	8f 4f       	sbci	r24, 0xFF	; 255
    16aa:	9f 4f       	sbci	r25, 0xFF	; 255
    16ac:	08 95       	ret

000016ae <__fp_split3>:
    16ae:	57 fd       	sbrc	r21, 7
    16b0:	90 58       	subi	r25, 0x80	; 128
    16b2:	44 0f       	add	r20, r20
    16b4:	55 1f       	adc	r21, r21
    16b6:	59 f0       	breq	.+22     	; 0x16ce <__fp_splitA+0x10>
    16b8:	5f 3f       	cpi	r21, 0xFF	; 255
    16ba:	71 f0       	breq	.+28     	; 0x16d8 <__fp_splitA+0x1a>
    16bc:	47 95       	ror	r20

000016be <__fp_splitA>:
    16be:	88 0f       	add	r24, r24
    16c0:	97 fb       	bst	r25, 7
    16c2:	99 1f       	adc	r25, r25
    16c4:	61 f0       	breq	.+24     	; 0x16de <__fp_splitA+0x20>
    16c6:	9f 3f       	cpi	r25, 0xFF	; 255
    16c8:	79 f0       	breq	.+30     	; 0x16e8 <__fp_splitA+0x2a>
    16ca:	87 95       	ror	r24
    16cc:	08 95       	ret
    16ce:	12 16       	cp	r1, r18
    16d0:	13 06       	cpc	r1, r19
    16d2:	14 06       	cpc	r1, r20
    16d4:	55 1f       	adc	r21, r21
    16d6:	f2 cf       	rjmp	.-28     	; 0x16bc <__fp_split3+0xe>
    16d8:	46 95       	lsr	r20
    16da:	f1 df       	rcall	.-30     	; 0x16be <__fp_splitA>
    16dc:	08 c0       	rjmp	.+16     	; 0x16ee <__fp_splitA+0x30>
    16de:	16 16       	cp	r1, r22
    16e0:	17 06       	cpc	r1, r23
    16e2:	18 06       	cpc	r1, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	f1 cf       	rjmp	.-30     	; 0x16ca <__fp_splitA+0xc>
    16e8:	86 95       	lsr	r24
    16ea:	71 05       	cpc	r23, r1
    16ec:	61 05       	cpc	r22, r1
    16ee:	08 94       	sec
    16f0:	08 95       	ret

000016f2 <__fp_zero>:
    16f2:	e8 94       	clt

000016f4 <__fp_szero>:
    16f4:	bb 27       	eor	r27, r27
    16f6:	66 27       	eor	r22, r22
    16f8:	77 27       	eor	r23, r23
    16fa:	cb 01       	movw	r24, r22
    16fc:	97 f9       	bld	r25, 7
    16fe:	08 95       	ret

00001700 <__mulsf3>:
    1700:	0e 94 93 0b 	call	0x1726	; 0x1726 <__mulsf3x>
    1704:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__fp_round>
    1708:	0e 94 38 0b 	call	0x1670	; 0x1670 <__fp_pscA>
    170c:	38 f0       	brcs	.+14     	; 0x171c <__mulsf3+0x1c>
    170e:	0e 94 3f 0b 	call	0x167e	; 0x167e <__fp_pscB>
    1712:	20 f0       	brcs	.+8      	; 0x171c <__mulsf3+0x1c>
    1714:	95 23       	and	r25, r21
    1716:	11 f0       	breq	.+4      	; 0x171c <__mulsf3+0x1c>
    1718:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__fp_inf>
    171c:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__fp_nan>
    1720:	11 24       	eor	r1, r1
    1722:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__fp_szero>

00001726 <__mulsf3x>:
    1726:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__fp_split3>
    172a:	70 f3       	brcs	.-36     	; 0x1708 <__mulsf3+0x8>

0000172c <__mulsf3_pse>:
    172c:	95 9f       	mul	r25, r21
    172e:	c1 f3       	breq	.-16     	; 0x1720 <__mulsf3+0x20>
    1730:	95 0f       	add	r25, r21
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	55 1f       	adc	r21, r21
    1736:	62 9f       	mul	r22, r18
    1738:	f0 01       	movw	r30, r0
    173a:	72 9f       	mul	r23, r18
    173c:	bb 27       	eor	r27, r27
    173e:	f0 0d       	add	r31, r0
    1740:	b1 1d       	adc	r27, r1
    1742:	63 9f       	mul	r22, r19
    1744:	aa 27       	eor	r26, r26
    1746:	f0 0d       	add	r31, r0
    1748:	b1 1d       	adc	r27, r1
    174a:	aa 1f       	adc	r26, r26
    174c:	64 9f       	mul	r22, r20
    174e:	66 27       	eor	r22, r22
    1750:	b0 0d       	add	r27, r0
    1752:	a1 1d       	adc	r26, r1
    1754:	66 1f       	adc	r22, r22
    1756:	82 9f       	mul	r24, r18
    1758:	22 27       	eor	r18, r18
    175a:	b0 0d       	add	r27, r0
    175c:	a1 1d       	adc	r26, r1
    175e:	62 1f       	adc	r22, r18
    1760:	73 9f       	mul	r23, r19
    1762:	b0 0d       	add	r27, r0
    1764:	a1 1d       	adc	r26, r1
    1766:	62 1f       	adc	r22, r18
    1768:	83 9f       	mul	r24, r19
    176a:	a0 0d       	add	r26, r0
    176c:	61 1d       	adc	r22, r1
    176e:	22 1f       	adc	r18, r18
    1770:	74 9f       	mul	r23, r20
    1772:	33 27       	eor	r19, r19
    1774:	a0 0d       	add	r26, r0
    1776:	61 1d       	adc	r22, r1
    1778:	23 1f       	adc	r18, r19
    177a:	84 9f       	mul	r24, r20
    177c:	60 0d       	add	r22, r0
    177e:	21 1d       	adc	r18, r1
    1780:	82 2f       	mov	r24, r18
    1782:	76 2f       	mov	r23, r22
    1784:	6a 2f       	mov	r22, r26
    1786:	11 24       	eor	r1, r1
    1788:	9f 57       	subi	r25, 0x7F	; 127
    178a:	50 40       	sbci	r21, 0x00	; 0
    178c:	9a f0       	brmi	.+38     	; 0x17b4 <__mulsf3_pse+0x88>
    178e:	f1 f0       	breq	.+60     	; 0x17cc <__mulsf3_pse+0xa0>
    1790:	88 23       	and	r24, r24
    1792:	4a f0       	brmi	.+18     	; 0x17a6 <__mulsf3_pse+0x7a>
    1794:	ee 0f       	add	r30, r30
    1796:	ff 1f       	adc	r31, r31
    1798:	bb 1f       	adc	r27, r27
    179a:	66 1f       	adc	r22, r22
    179c:	77 1f       	adc	r23, r23
    179e:	88 1f       	adc	r24, r24
    17a0:	91 50       	subi	r25, 0x01	; 1
    17a2:	50 40       	sbci	r21, 0x00	; 0
    17a4:	a9 f7       	brne	.-22     	; 0x1790 <__mulsf3_pse+0x64>
    17a6:	9e 3f       	cpi	r25, 0xFE	; 254
    17a8:	51 05       	cpc	r21, r1
    17aa:	80 f0       	brcs	.+32     	; 0x17cc <__mulsf3_pse+0xa0>
    17ac:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__fp_inf>
    17b0:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__fp_szero>
    17b4:	5f 3f       	cpi	r21, 0xFF	; 255
    17b6:	e4 f3       	brlt	.-8      	; 0x17b0 <__mulsf3_pse+0x84>
    17b8:	98 3e       	cpi	r25, 0xE8	; 232
    17ba:	d4 f3       	brlt	.-12     	; 0x17b0 <__mulsf3_pse+0x84>
    17bc:	86 95       	lsr	r24
    17be:	77 95       	ror	r23
    17c0:	67 95       	ror	r22
    17c2:	b7 95       	ror	r27
    17c4:	f7 95       	ror	r31
    17c6:	e7 95       	ror	r30
    17c8:	9f 5f       	subi	r25, 0xFF	; 255
    17ca:	c1 f7       	brne	.-16     	; 0x17bc <__mulsf3_pse+0x90>
    17cc:	fe 2b       	or	r31, r30
    17ce:	88 0f       	add	r24, r24
    17d0:	91 1d       	adc	r25, r1
    17d2:	96 95       	lsr	r25
    17d4:	87 95       	ror	r24
    17d6:	97 f9       	bld	r25, 7
    17d8:	08 95       	ret

000017da <malloc>:
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	82 30       	cpi	r24, 0x02	; 2
    17e0:	91 05       	cpc	r25, r1
    17e2:	10 f4       	brcc	.+4      	; 0x17e8 <malloc+0xe>
    17e4:	82 e0       	ldi	r24, 0x02	; 2
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	e0 91 40 01 	lds	r30, 0x0140
    17ec:	f0 91 41 01 	lds	r31, 0x0141
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	c0 e0       	ldi	r28, 0x00	; 0
    17f6:	d0 e0       	ldi	r29, 0x00	; 0
    17f8:	30 97       	sbiw	r30, 0x00	; 0
    17fa:	11 f1       	breq	.+68     	; 0x1840 <malloc+0x66>
    17fc:	40 81       	ld	r20, Z
    17fe:	51 81       	ldd	r21, Z+1	; 0x01
    1800:	48 17       	cp	r20, r24
    1802:	59 07       	cpc	r21, r25
    1804:	c0 f0       	brcs	.+48     	; 0x1836 <malloc+0x5c>
    1806:	48 17       	cp	r20, r24
    1808:	59 07       	cpc	r21, r25
    180a:	61 f4       	brne	.+24     	; 0x1824 <malloc+0x4a>
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	93 81       	ldd	r25, Z+3	; 0x03
    1810:	20 97       	sbiw	r28, 0x00	; 0
    1812:	19 f0       	breq	.+6      	; 0x181a <malloc+0x40>
    1814:	9b 83       	std	Y+3, r25	; 0x03
    1816:	8a 83       	std	Y+2, r24	; 0x02
    1818:	2b c0       	rjmp	.+86     	; 0x1870 <malloc+0x96>
    181a:	90 93 41 01 	sts	0x0141, r25
    181e:	80 93 40 01 	sts	0x0140, r24
    1822:	26 c0       	rjmp	.+76     	; 0x1870 <malloc+0x96>
    1824:	21 15       	cp	r18, r1
    1826:	31 05       	cpc	r19, r1
    1828:	19 f0       	breq	.+6      	; 0x1830 <malloc+0x56>
    182a:	42 17       	cp	r20, r18
    182c:	53 07       	cpc	r21, r19
    182e:	18 f4       	brcc	.+6      	; 0x1836 <malloc+0x5c>
    1830:	9a 01       	movw	r18, r20
    1832:	be 01       	movw	r22, r28
    1834:	df 01       	movw	r26, r30
    1836:	ef 01       	movw	r28, r30
    1838:	02 80       	ldd	r0, Z+2	; 0x02
    183a:	f3 81       	ldd	r31, Z+3	; 0x03
    183c:	e0 2d       	mov	r30, r0
    183e:	dc cf       	rjmp	.-72     	; 0x17f8 <malloc+0x1e>
    1840:	21 15       	cp	r18, r1
    1842:	31 05       	cpc	r19, r1
    1844:	09 f1       	breq	.+66     	; 0x1888 <malloc+0xae>
    1846:	28 1b       	sub	r18, r24
    1848:	39 0b       	sbc	r19, r25
    184a:	24 30       	cpi	r18, 0x04	; 4
    184c:	31 05       	cpc	r19, r1
    184e:	90 f4       	brcc	.+36     	; 0x1874 <malloc+0x9a>
    1850:	12 96       	adiw	r26, 0x02	; 2
    1852:	8d 91       	ld	r24, X+
    1854:	9c 91       	ld	r25, X
    1856:	13 97       	sbiw	r26, 0x03	; 3
    1858:	61 15       	cp	r22, r1
    185a:	71 05       	cpc	r23, r1
    185c:	21 f0       	breq	.+8      	; 0x1866 <malloc+0x8c>
    185e:	fb 01       	movw	r30, r22
    1860:	93 83       	std	Z+3, r25	; 0x03
    1862:	82 83       	std	Z+2, r24	; 0x02
    1864:	04 c0       	rjmp	.+8      	; 0x186e <malloc+0x94>
    1866:	90 93 41 01 	sts	0x0141, r25
    186a:	80 93 40 01 	sts	0x0140, r24
    186e:	fd 01       	movw	r30, r26
    1870:	32 96       	adiw	r30, 0x02	; 2
    1872:	44 c0       	rjmp	.+136    	; 0x18fc <malloc+0x122>
    1874:	fd 01       	movw	r30, r26
    1876:	e2 0f       	add	r30, r18
    1878:	f3 1f       	adc	r31, r19
    187a:	81 93       	st	Z+, r24
    187c:	91 93       	st	Z+, r25
    187e:	22 50       	subi	r18, 0x02	; 2
    1880:	31 09       	sbc	r19, r1
    1882:	2d 93       	st	X+, r18
    1884:	3c 93       	st	X, r19
    1886:	3a c0       	rjmp	.+116    	; 0x18fc <malloc+0x122>
    1888:	20 91 3e 01 	lds	r18, 0x013E
    188c:	30 91 3f 01 	lds	r19, 0x013F
    1890:	23 2b       	or	r18, r19
    1892:	41 f4       	brne	.+16     	; 0x18a4 <malloc+0xca>
    1894:	20 91 02 01 	lds	r18, 0x0102
    1898:	30 91 03 01 	lds	r19, 0x0103
    189c:	30 93 3f 01 	sts	0x013F, r19
    18a0:	20 93 3e 01 	sts	0x013E, r18
    18a4:	20 91 00 01 	lds	r18, 0x0100
    18a8:	30 91 01 01 	lds	r19, 0x0101
    18ac:	21 15       	cp	r18, r1
    18ae:	31 05       	cpc	r19, r1
    18b0:	41 f4       	brne	.+16     	; 0x18c2 <malloc+0xe8>
    18b2:	2d b7       	in	r18, 0x3d	; 61
    18b4:	3e b7       	in	r19, 0x3e	; 62
    18b6:	40 91 04 01 	lds	r20, 0x0104
    18ba:	50 91 05 01 	lds	r21, 0x0105
    18be:	24 1b       	sub	r18, r20
    18c0:	35 0b       	sbc	r19, r21
    18c2:	e0 91 3e 01 	lds	r30, 0x013E
    18c6:	f0 91 3f 01 	lds	r31, 0x013F
    18ca:	e2 17       	cp	r30, r18
    18cc:	f3 07       	cpc	r31, r19
    18ce:	a0 f4       	brcc	.+40     	; 0x18f8 <malloc+0x11e>
    18d0:	2e 1b       	sub	r18, r30
    18d2:	3f 0b       	sbc	r19, r31
    18d4:	28 17       	cp	r18, r24
    18d6:	39 07       	cpc	r19, r25
    18d8:	78 f0       	brcs	.+30     	; 0x18f8 <malloc+0x11e>
    18da:	ac 01       	movw	r20, r24
    18dc:	4e 5f       	subi	r20, 0xFE	; 254
    18de:	5f 4f       	sbci	r21, 0xFF	; 255
    18e0:	24 17       	cp	r18, r20
    18e2:	35 07       	cpc	r19, r21
    18e4:	48 f0       	brcs	.+18     	; 0x18f8 <malloc+0x11e>
    18e6:	4e 0f       	add	r20, r30
    18e8:	5f 1f       	adc	r21, r31
    18ea:	50 93 3f 01 	sts	0x013F, r21
    18ee:	40 93 3e 01 	sts	0x013E, r20
    18f2:	81 93       	st	Z+, r24
    18f4:	91 93       	st	Z+, r25
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <malloc+0x122>
    18f8:	e0 e0       	ldi	r30, 0x00	; 0
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	cf 01       	movw	r24, r30
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	08 95       	ret

00001904 <free>:
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	09 f4       	brne	.+2      	; 0x1912 <free+0xe>
    1910:	8c c0       	rjmp	.+280    	; 0x1a2a <free+0x126>
    1912:	fc 01       	movw	r30, r24
    1914:	32 97       	sbiw	r30, 0x02	; 2
    1916:	13 82       	std	Z+3, r1	; 0x03
    1918:	12 82       	std	Z+2, r1	; 0x02
    191a:	00 91 40 01 	lds	r16, 0x0140
    191e:	10 91 41 01 	lds	r17, 0x0141
    1922:	01 15       	cp	r16, r1
    1924:	11 05       	cpc	r17, r1
    1926:	81 f4       	brne	.+32     	; 0x1948 <free+0x44>
    1928:	20 81       	ld	r18, Z
    192a:	31 81       	ldd	r19, Z+1	; 0x01
    192c:	82 0f       	add	r24, r18
    192e:	93 1f       	adc	r25, r19
    1930:	20 91 3e 01 	lds	r18, 0x013E
    1934:	30 91 3f 01 	lds	r19, 0x013F
    1938:	28 17       	cp	r18, r24
    193a:	39 07       	cpc	r19, r25
    193c:	79 f5       	brne	.+94     	; 0x199c <free+0x98>
    193e:	f0 93 3f 01 	sts	0x013F, r31
    1942:	e0 93 3e 01 	sts	0x013E, r30
    1946:	71 c0       	rjmp	.+226    	; 0x1a2a <free+0x126>
    1948:	d8 01       	movw	r26, r16
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	50 e0       	ldi	r21, 0x00	; 0
    194e:	ae 17       	cp	r26, r30
    1950:	bf 07       	cpc	r27, r31
    1952:	50 f4       	brcc	.+20     	; 0x1968 <free+0x64>
    1954:	12 96       	adiw	r26, 0x02	; 2
    1956:	2d 91       	ld	r18, X+
    1958:	3c 91       	ld	r19, X
    195a:	13 97       	sbiw	r26, 0x03	; 3
    195c:	ad 01       	movw	r20, r26
    195e:	21 15       	cp	r18, r1
    1960:	31 05       	cpc	r19, r1
    1962:	09 f1       	breq	.+66     	; 0x19a6 <free+0xa2>
    1964:	d9 01       	movw	r26, r18
    1966:	f3 cf       	rjmp	.-26     	; 0x194e <free+0x4a>
    1968:	9d 01       	movw	r18, r26
    196a:	da 01       	movw	r26, r20
    196c:	33 83       	std	Z+3, r19	; 0x03
    196e:	22 83       	std	Z+2, r18	; 0x02
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	86 0f       	add	r24, r22
    1976:	97 1f       	adc	r25, r23
    1978:	82 17       	cp	r24, r18
    197a:	93 07       	cpc	r25, r19
    197c:	69 f4       	brne	.+26     	; 0x1998 <free+0x94>
    197e:	ec 01       	movw	r28, r24
    1980:	28 81       	ld	r18, Y
    1982:	39 81       	ldd	r19, Y+1	; 0x01
    1984:	26 0f       	add	r18, r22
    1986:	37 1f       	adc	r19, r23
    1988:	2e 5f       	subi	r18, 0xFE	; 254
    198a:	3f 4f       	sbci	r19, 0xFF	; 255
    198c:	31 83       	std	Z+1, r19	; 0x01
    198e:	20 83       	st	Z, r18
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	9b 81       	ldd	r25, Y+3	; 0x03
    1994:	93 83       	std	Z+3, r25	; 0x03
    1996:	82 83       	std	Z+2, r24	; 0x02
    1998:	45 2b       	or	r20, r21
    199a:	29 f4       	brne	.+10     	; 0x19a6 <free+0xa2>
    199c:	f0 93 41 01 	sts	0x0141, r31
    19a0:	e0 93 40 01 	sts	0x0140, r30
    19a4:	42 c0       	rjmp	.+132    	; 0x1a2a <free+0x126>
    19a6:	13 96       	adiw	r26, 0x03	; 3
    19a8:	fc 93       	st	X, r31
    19aa:	ee 93       	st	-X, r30
    19ac:	12 97       	sbiw	r26, 0x02	; 2
    19ae:	ed 01       	movw	r28, r26
    19b0:	49 91       	ld	r20, Y+
    19b2:	59 91       	ld	r21, Y+
    19b4:	9e 01       	movw	r18, r28
    19b6:	24 0f       	add	r18, r20
    19b8:	35 1f       	adc	r19, r21
    19ba:	e2 17       	cp	r30, r18
    19bc:	f3 07       	cpc	r31, r19
    19be:	71 f4       	brne	.+28     	; 0x19dc <free+0xd8>
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	84 0f       	add	r24, r20
    19c6:	95 1f       	adc	r25, r21
    19c8:	02 96       	adiw	r24, 0x02	; 2
    19ca:	11 96       	adiw	r26, 0x01	; 1
    19cc:	9c 93       	st	X, r25
    19ce:	8e 93       	st	-X, r24
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	13 96       	adiw	r26, 0x03	; 3
    19d6:	9c 93       	st	X, r25
    19d8:	8e 93       	st	-X, r24
    19da:	12 97       	sbiw	r26, 0x02	; 2
    19dc:	e0 e0       	ldi	r30, 0x00	; 0
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	d8 01       	movw	r26, r16
    19e2:	12 96       	adiw	r26, 0x02	; 2
    19e4:	8d 91       	ld	r24, X+
    19e6:	9c 91       	ld	r25, X
    19e8:	13 97       	sbiw	r26, 0x03	; 3
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	19 f0       	breq	.+6      	; 0x19f4 <free+0xf0>
    19ee:	f8 01       	movw	r30, r16
    19f0:	8c 01       	movw	r16, r24
    19f2:	f6 cf       	rjmp	.-20     	; 0x19e0 <free+0xdc>
    19f4:	8d 91       	ld	r24, X+
    19f6:	9c 91       	ld	r25, X
    19f8:	98 01       	movw	r18, r16
    19fa:	2e 5f       	subi	r18, 0xFE	; 254
    19fc:	3f 4f       	sbci	r19, 0xFF	; 255
    19fe:	82 0f       	add	r24, r18
    1a00:	93 1f       	adc	r25, r19
    1a02:	20 91 3e 01 	lds	r18, 0x013E
    1a06:	30 91 3f 01 	lds	r19, 0x013F
    1a0a:	28 17       	cp	r18, r24
    1a0c:	39 07       	cpc	r19, r25
    1a0e:	69 f4       	brne	.+26     	; 0x1a2a <free+0x126>
    1a10:	30 97       	sbiw	r30, 0x00	; 0
    1a12:	29 f4       	brne	.+10     	; 0x1a1e <free+0x11a>
    1a14:	10 92 41 01 	sts	0x0141, r1
    1a18:	10 92 40 01 	sts	0x0140, r1
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <free+0x11e>
    1a1e:	13 82       	std	Z+3, r1	; 0x03
    1a20:	12 82       	std	Z+2, r1	; 0x02
    1a22:	10 93 3f 01 	sts	0x013F, r17
    1a26:	00 93 3e 01 	sts	0x013E, r16
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	08 95       	ret

00001a34 <_exit>:
    1a34:	f8 94       	cli

00001a36 <__stop_program>:
    1a36:	ff cf       	rjmp	.-2      	; 0x1a36 <__stop_program>
